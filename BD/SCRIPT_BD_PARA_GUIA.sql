-- comentarios
EXEC sys.sp_addextendedproperty 
  @name=N'MS_Description'
 ,@value=N'Here is my description!'  --<<<<
 ,@level0type=N'SCHEMA'
 ,@level0name=N'dbo'
 ,@level1type=N'TABLE'
 ,@level1name=N'TABLE_NAME' --<<<<
 ,@level2type=N'COLUMN'
 ,@level2name=N'FIELD_NAME'  --<<<<
--DROP TABLE T034_CONCENTRACION;

---  FALTA LA PARTE DE PEDIDOS 

-- CREAR EK ESQUEMA DE BASE DE DATOS

--NO SE CREARA ESQUEMA POR COMPATIBILIDAD CON ORACLE
--create database INTELJR;
USE INTELJR
GO


--CREATE SEQUENCE  SQ_T058_PAIS_F058_CODIGO  MINVALUE 1 MAXVALUE 9999999 INCREMENT BY 1 START WITH 1 NO CACHE  /*ORDER*/  NO CYCLE ;
--CREATE SEQUENCE  SQ_T059_DEPART_F059_CODIGO  MINVALUE 1 MAXVALUE 9999999 INCREMENT BY 1 START WITH 1 NO CACHE  /*ORDER*/  NO CYCLE ;
--CREATE SEQUENCE  SQ_T060_CIUDAD_F060_CODIGO  MINVALUE 1 MAXVALUE 9999999 INCREMENT BY 1 START WITH 1 NO CACHE  /*ORDER*/  NO CYCLE ;

--RAISERROR (15600,-1,-1, 'mysp_CreateCustomer');  


SELECT  ERROR_NUMBER()  AS ErrorNumber,      
      ERROR_SEVERITY()  AS ErrorSeverity,
      ERROR_STATE()     AS ErrorState,
      ERROR_PROCEDURE() AS ErrorProcedure,
      ERROR_LINE()      AS ErrorLine,
      ERROR_MESSAGE()   AS ErrorMessage;

/* BEGIN TRY      
	   SELECT 1/0
	END TRY
	BEGIN CATCH
	…
	— Snippet de los BOL de SQL Server.
	DECLARE @ErrorMessage NVARCHAR(4000);
	DECLARE @ErrorSeverity INT;
	DECLARE @ErrorState INT; 
	
	SELECT     @ErrorMessage = ERROR_MESSAGE(),
		@ErrorSeverity = ERROR_SEVERITY(),
		@ErrorState = ERROR_STATE(); 

	RAISERROR (@ErrorMessage, — Message text.
			   @ErrorSeverity, — Severity.
			   @ErrorState — State.
			   ); 
	END CATCH
*/

-- COMO INSERTAR UN VALOR DESAVILITANDO EL IDENTITY
/*
   N SET IDENTITY_INSERT Table1 ON

   INSERT INTO TABLE1 (OperationID,OpDescription,FilterID) VALUES (20,'Hierachy Update',1)

   SET IDENTITY_INSERT Table1 OFF

*/

CREATE TABLE inventario.T058_PAIS(
	id NUMERIC (5,0) PRIMARY KEY identity(1,1),  --F058_CODIGO
	F058_DESCRIPCION VARCHAR(50)
);
CREATE UNIQUE INDEX T058_F058_DESCRIPCION_IDX ON inventario.T058_PAIS(F058_DESCRIPCION); 

    SET IDENTITY_INSERT T058_PAIS ON
    INSERT INTO inventario.T058_PAIS(id,F058_DESCRIPCION)  VALUES(0,'N/A') ;
    SET IDENTITY_INSERT T058_PAIS OFF
       go   



-- CREATE TRIGGER TGR_T0458_PAIS
--    ON T058_PAIS  
--	 Instead Of INSERT  --EACH ROW
--AS
--       --IF  :NEW.F058_CODIGO  IS NULL THEN
--         SELECT SQ_T058_PAIS_F058_CODIGO.NEXTVAL INTO :NEW.F058_CODIGO FROM DUAL;
--       --END IF;
--GO


	CREATE TABLE inventario.T059_DEPARTAMENTOS
	(
	  id NUMERIC(5,0 ) PRIMARY KEY identity(1,1),  --F059_CODIGO
	  F059_DESCRIPCION VARCHAR(50),
	  F058_id NUMERIC(5,0),  --PAIS    foreign key
	  CONSTRAINT FK_F058_id_T059  FOREIGN KEY (F058_id) REFERENCES inventario.T058_PAIS(id) --PAIS
	);
	  SET IDENTITY_INSERT T059_DEPARTAMENTOS ON
      INSERT INTO    inventario.T059_DEPARTAMENTOS( id,F059_DESCRIPCION,F058_id)  VALUES(0,'N/A',0) ;
      SET IDENTITY_INSERT T059_DEPARTAMENTOS OFF
       go   

		--CREATE  TRIGGER TGR_T059_DEPART
		--ON T059_DEPARTAMENTOS
		--instead of INSERT 
		--as
		--	--IF  :NEW.F058_CODIGO  IS NULL THEN
		--		SELECT SQ_T059_DEPART_F059_CODIGO.NEXTVAL INTO :NEW.F059_CODIGO FROM DUAL;
		--	--END IF;
		--go
	CREATE TABLE inventario.T060_CIUDAD(
	id NUMERIC(5,0)  PRIMARY KEY identity(1,1), --F060_CODIGO
	F060_DESCRIPCION VARCHAR(50),
	F059_id NUMERIC(5,0),   --FK
	CONSTRAINT   FK_F059_id_T060 FOREIGN KEY (F059_id) REFERENCES inventario.T059_DEPARTAMENTOS(id)
	); 

      SET IDENTITY_INSERT inventario.T060_CIUDAD ON
      INSERT INTO    inventario.T060_CIUDAD(id,F060_DESCRIPCION,F059_id)  VALUES(0,'N/A',0) ;
      SET IDENTITY_INSERT T060_CIUDAD OFF
       go   

	  
	  

-- CREATE  TRIGGER TGR_T060_CIUDAD
--    ON T060_CIUDAD
--    instead of  INSERT
--    as
--       --IF  :NEW.F058_CODIGO  IS NULL THEN
--         SELECT SQ_T060_CIUDAD_F060_CODIGO.NEXTVAL INTO :NEW.F060_CODIGO FROM DUAL;
--       --END IF;
--go
 
	CREATE TABLE inventario.T034_CONCENTRACION (
	  id numeric(6,0)     identity(1,1) NOT NULL ,
	  F034_DESCRIPCION VARCHAR(60)  NULL  ,
	PRIMARY KEY(id));

		--CREATE SEQUENCE  SQ_T034_CONCEN_F034_CODIGO  MINVALUE 1 MAXVALUE 9999999 INCREMENT BY 1 START WITH 1 NO CACHE    NO CYCLE ;
		CREATE UNIQUE INDEX invent_T034_F034_DESCRIPCION_IDX ON inventario.T034_CONCENTRACION(F034_DESCRIPCION); 

		SET IDENTITY_INSERT T034_CONCENTRACION ON
        INSERT INTO inventario.T034_CONCENTRACION  VALUES  (0,'N/A' );
        SET IDENTITY_INSERT T034_CONCENTRACION OFF
        go   


		

	CREATE TABLE inventario.T033_FORMA_FARMACEUTICA (
	  id NUMERIC(5,0)   NOT NULL  identity(1,1) ,
	  F033_DESCRIPCION VARCHAR(100)  NULL    ,  -- IDX UNIQUE
	PRIMARY KEY(id));
			--CREATE SEQUENCE  SQ_T033_FORMAF_F033_CODIGO  MINVALUE 1 MAXVALUE 9999999 INCREMENT BY 1 START WITH 1 NOCACHE  ORDER  NOCYCLE ;
		CREATE UNIQUE INDEX T033_F033_DESCRIPCION_IDX ON inventario.T033_FORMA_FARMACEUTICA (F033_DESCRIPCION); 
			
		SET IDENTITY_INSERT T033_FORMA_FARMACEUTICA ON
          INSERT INTO inventario.T033_FORMA_FARMACEUTICA  VALUES  (0,'N/A' );
		SET IDENTITY_INSERT T033_FORMA_FARMACEUTICA OFF
         go   

  
	  CREATE TABLE inventario.T031_GENERICO (
		id  NUMERIC(8,0)   NOT NULL  identity(1,1),  --PK
		F031_NOMBRE_GEN VARCHAR(60) NOT NULL,  -- NOMBRE GENERICO
		F034_id  VARCHAR(6)   NOT NULL  , --FK
		F033_id  VARCHAR(8)  NOT NULL  ,  --FK
	   -- F031_DESCRIPCION_FINAL  VARCHAR(100)   NULL    ,
	  PRIMARY KEY(id));
  
	 --CREATE SEQUENCE  SQ_T031_GENERICO_F031_CODIGO  MINVALUE 1 MAXVALUE 9999999 INCREMENT BY 1 START WITH 1 NOCACHE  ORDER  NOCYCLE ; 
  
	  CREATE UNIQUE INDEX T031_F031_NOMBRE_GEN_IDX ON inventario.T031_GENERICO (F031_NOMBRE_GEN); 

	  ALTER TABLE  T031_GENERICO ADD CONSTRAINT FK_F033_id_T031   FOREIGN KEY  (F033_id)  REFERENCES T033_FORMA_FARMACEUTICA(id);
	  ALTER TABLE  T031_GENERICO ADD CONSTRAINT FK_F034_id_T031   FOREIGN KEY  (F034_id)  REFERENCES T034_CONCENTRACION(id);
	  go
EXEC sys.sp_addextendedproperty 
    @name=N'C_CODIGO_FORMAF',
    @value=N'CODIGO DE LA FORMA FARMACEUTICA'  --<<<<
   ,@level0type=N'inventario'
   ,@level1name=N'T031_GENERICO' --<<<<
   ,@level2name=N'F033_CODIGO'  --<<<<
   ;
   go

   EXEC sys.sp_addextendedproperty 
    @name=N'C_CODIGO_CONCENTRACION',
    @value=N'CODIGO DE LA CONCENTRACION'  --<<<<
   ,@level0type=N'inventario'
   ,@level1name=N'T031_GENERICO' --<<<<
   ,@level2name=N'F034_CODIGO'  --<<<<
   ;
   go
	
	--  COMMENT ON COLUMN inventario.T031_GENERICO.F033_CODIGO IS 'CODIGO DE LA FORMA FARMACEUTICA';
	  --COMMENT ON COLUMN inventario.T031_GENERICO.F034_CODIGO IS 'CODIGO  DE LA CONCENTRACION';
  SET IDENTITY_INSERT T031_GENERICO ON
   INSERT INTO inventario.T031_GENERICO  VALUES  (0,'N/A' ,0,0);      
  SET IDENTITY_INSERT T031_GENERICO OFF
  go   

	 
  

   --*************
     CREATE TABLE T021_UNIDAD_CONTENIDO (
      id VARCHAR(4)  NOT NULL  ,-- NO ES AUTOINCREMENTABLE
      F021_DESCRIPCION VARCHAR(15)  NOT NULL    ,
    PRIMARY KEY(id));
    
    --CREATE SEQUENCE  SQ_T021_UND_CONTEN_F021_CODIGO  MINVALUE 1 MAXVALUE 9999999 INCREMENT BY 1 START WITH 1 NO CACHE  NO CYCLE ; 
      
    CREATE UNIQUE INDEX T021_F021_DESCRIPCION_IDX ON T021_UNIDAD_CONTENIDO (F021_DESCRIPCION); 
    
  --  COMMENT ON COLUMN T021_UNIDAD_CONTENIDO.F021_CODIGO IS 'Ml,Cm,Gr,Cm3, Kg,Mt,Mlt,UND   CODIGO UNIDAD DE CONTENIDO ';
  --  COMMENT ON COLUMN T021_UNIDAD_CONTENIDO.F021_DESCRIPCION IS 'DESCRIPCION POR EJEMPLO  =>    Militro, Centimetro, Centimetro cubico,  KILOGRAMO,UNIDAD, Ml,Mt';
   
        INSERT INTO  T021_UNIDAD_CONTENIDO  VALUES  ('Cm','CENTRIMETROS');
        INSERT INTO  T021_UNIDAD_CONTENIDO  VALUES  ('UND','UNIDAD');
        INSERT INTO  T021_UNIDAD_CONTENIDO  VALUES  ('Mt','METRO');
        INSERT INTO  T021_UNIDAD_CONTENIDO  VALUES  ('Kg','KILOGRAMO');
        INSERT INTO  T021_UNIDAD_CONTENIDO  VALUES  ('Lt','LITRO');        
    
    -- UNDAD DE INGRESO
    --   UNIDAD DE MEDIDA  Y CONVERSION
      CREATE TABLE T024_UNIDAD_MEDIDA (
        id VARCHAR(3)  NOT NULL   ,  --Kg,Mt,Lt,UND  UNIDA NO HAY NECESIDAD DE CONVERTIR unidad de medida primaria
        F024_DESCRIPCION VARCHAR(15) NOT  NULL    ,   --  IDX  UNIQUE   METRO, KILOGRAMO, MILILITRO
      PRIMARY KEY(id));
      
           
        CREATE UNIQUE INDEX T024_F024_DESCRIPCION_IDX ON T024_UNIDAD_MEDIDA (F024_DESCRIPCION);  
      --  COMMENT ON COLUMN T024_UNIDAD_MEDIDA.F024_CODIGO  IS 'Kg,Mt,Lt,UND  UNIDA NO HAY NECESIDAD DE CONVERTIR.  este es la  unidad de medida primaria';
     --   COMMENT ON COLUMN T024_UNIDAD_MEDIDA.F024_DESCRIPCION IS 'DESCRIPCION POR EJEMPLO  =>  KILOGRAMO,UNIDAD, METRO, Litro';
      
        INSERT INTO  T024_UNIDAD_MEDIDA  VALUES  ('UND','UNIDAD');
        INSERT INTO  T024_UNIDAD_MEDIDA  VALUES  ('Mt','METRO');
        INSERT INTO  T024_UNIDAD_MEDIDA  VALUES  ('Kg','KILOGRAMO');
        INSERT INTO  T024_UNIDAD_MEDIDA  VALUES  ('Lt','LITRO');
        


        
      
      CREATE TABLE T022_CONVER_UND (
        id VARCHAR(3)  NOT NULL  , --(Cm,Gr,Mlt) UNIDA NO HAY NECESIDAD DE CONVERTIR
        F024_id VARCHAR(3)  NOT NULL  , --FK UNIDAD DE MEDIDA    Cod DE UNIDAD DE MEDID EJEMPLO :  KG,MT,ML
        F022_DESCRIPCION VARCHAR(15)  NOT NULL  ,  -- IDX UNICO    CENTIMETRO, MILILITRO, MILIMETRO
        F022_UND_EQUIVAL NUMERIC(5,0)  NOT NULL ,     --POR EJEMPLO PARA KG ACA IRA 1000 , PARA METRO 100, PARA MILITRO 1000  
      PRIMARY KEY(id));
      --   UNIDAD DE MEDIDA  Y CONVERSION
      
    CREATE UNIQUE INDEX T022_F022_DESCRIPCION_IDX ON T022_CONVER_UND (F022_DESCRIPCION);
    ALTER TABLE  T022_CONVER_UND ADD CONSTRAINT FK_F024_id_T022   FOREIGN KEY  (F024_id)  REFERENCES T024_UNIDAD_MEDIDA(id);    
    
    
  --  COMMENT  ON COLUMN   T022_CONVER_UND.F024_CODIGO  IS  'Cod DE UNIDAD DE MEDID EJEMPLO :  KG,MT,ML';
  --  COMMENT ON COLUMN    T022_CONVER_UND.F022_DESCRIPCION IS  'CENTIMETRO, MILILITRO, MILIMETRO';
   -- COMMENT  ON COLUMN   T022_CONVER_UND.F022_UND_EQUIVAL  IS 'POR EJEMPLO PARA KG ACA IRA 1000 , PARA METRO 100, PARA MILITRO 1000';
    
    
   

--    ************* EMPAQUES ***************

  
   CREATE TABLE T020_EMPAQUES (
    id NUMERIC(4,0)  NOT NULL identity(1,1) ,-- AUTO
    F020_DESCRIPCION VARCHAR(40)   NOT   NULL    ,  -- IDX UNICO
  PRIMARY KEY(id));
  
 -- CREATE SEQUENCE  SQ_T020_EMPAQUES_F020_CODIGO  MINVALUE 1 MAXVALUE 9999999 INCREMENT BY 1 START WITH 1 NOCACHE  ORDER  NOCYCLE ; 
  
  CREATE UNIQUE INDEX T020_F020_DESCRIPCION_IDX ON T020_EMPAQUES (F020_DESCRIPCION);
 -- COMMENT ON COLUMN T020_EMPAQUES.F020_CODIGO IS 'CODIGO DEL EMPAQUE';
  --COMMENT ON COLUMN T020_EMPAQUES.F020_DESCRIPCION IS 'EJEMPLO  =>  CAJA,FRASCO,BOTELLA,E TC';
   
 -- INSERT INTO  T020_EMPAQUES (F020_CODIGO,F020_DESCRIPCION)  VALUES(0,'N/A');

      
   CREATE TABLE T037_EMPAQUES_PRIMARIOS (
      id NUMERIC(4,0)  NOT NULL identity(1,1) ,
      F020_id NUMERIC(4,0)  NOT NULL  ,  --FK
      F021_id VARCHAR(4)  NOT NULL  ,  --FK
      F037_CANTIDAD_CONTENIDO_PRIM NUMERIC(7,0)  NOT NULL  ,
      F037_DESCRIP_FINAL_EMP_PRIM VARCHAR(60)  NOT NULL  ,
      F037_UNIDAD_EMPAQUE NUMERIC(7,0)  NOT NULL   ,
   PRIMARY KEY(id));
   
   --CREATE SEQUENCE  SQ_T037_EMP_PRIMA_F037_CODIGO  MINVALUE 1 MAXVALUE 9999999 INCREMENT BY 1 START WITH 1 NOCACHE  ORDER  NOCYCLE ; 

    
      CREATE UNIQUE INDEX T037_F037_DESC_FIN_EMPPRIM_IDX ON T037_EMPAQUES_PRIMARIOS (F037_DESCRIP_FINAL_EMP_PRIM);
      ALTER TABLE  T037_EMPAQUES_PRIMARIOS ADD CONSTRAINT FK_F020_id_T037   FOREIGN KEY  (F020_id)  REFERENCES T020_EMPAQUES(id);
      ALTER TABLE  T037_EMPAQUES_PRIMARIOS ADD CONSTRAINT FK_F021_id_T037   FOREIGN KEY  (F021_id)  REFERENCES T021_UNIDAD_CONTENIDO(id);
    
     -- COMMENT ON COLUMN T037_EMPAQUES_PRIMARIOS.F020_CODIGO IS 'FK COIDGO EMPAQUE';
    --  COMMENT ON COLUMN T037_EMPAQUES_PRIMARIOS.F021_CODIGO IS 'FK COIDGO UNIDAD_CONTENIDO  => CODIGO DE LA UNIDAD_CONTENIDO EJEMPLO   => MLT,Cm,MT,KG,UND';
    --  COMMENT ON COLUMN T037_EMPAQUES_PRIMARIOS.F037_CANTIDAD_CONTENIDO_PRIM IS 'EJE: SI LA UNIDAD DE MEDIDA ES ML  Y EL FRASCO E x 100 ml  AQUI IRA 100,SI LA UM ES UND ENTONCES EQUIVALE AL NUMERO DE UNIDADES POR ENPAQUE';
      
	  
	SET IDENTITY_INSERT T037_EMPAQUES_PRIMARIOS ON
	INSERT INTO   T037_EMPAQUES_PRIMARIOS (id,F020_id,F021_id, F037_CANTIDAD_CONTENIDO_PRIM, F037_DESCRIP_FINAL_EMP_PRIM,F037_UNIDAD_EMPAQUE )  VALUES  (0,0,'UND',1  ,'N/A',1 );
        SET IDENTITY_INSERT T037_EMPAQUES_PRIMARIOS OFF
      
      
		--CREATE OR REPLACE TRIGGER TGR_T037_EMPAQUES_PRIMARIOS
		--BEFORE INSERT ON T037_EMPAQUES_PRIMARIOS 
		--FOR EACH ROW 
		--BEGIN
		--   IF  :NEW.F037_CODIGO  IS NULL THEN
		--	 SELECT SQ_T037_EMP_PRIMA_F037_CODIGO.NEXTVAL INTO :NEW.F037_CODIGO FROM DUAL;
		--   END IF;
		--END;
	 -- /       
      

    
    CREATE TABLE T038_EMPAQUE_SECUNDARIO (
      id NUMERIC(4)  NOT NULL identity(1,1) ,
      F020_id NUMERIC(4,0)  NOT NULL  ,  --FK  EJE: CAJA  TABLA EMPAQUES
      F038_CANTIDAD_EMPAQUES_PRIMAR NUMERIC(7,0)  NOT NULL  , --CANTIDAD DE EMPAQUES PRIMARIOS  QUE CONTIENE
      F038_DESCRIP_FINAL_EMP_SEC VARCHAR(40)  NOT NULL    ,
   PRIMARY KEY(id));

      --CREATE SEQUENCE  SQ_T038_EMP_SEC_F038_CODIGO  MINVALUE 1 MAXVALUE 9999999 INCREMENT BY 1 START WITH 1 NOCACHE  ORDER  NOCYCLE ; 
      
      CREATE UNIQUE INDEX T038_F038_DESC_FIN_EMPSEC_IDX ON T038_EMPAQUE_SECUNDARIO (F038_DESCRIP_FINAL_EMP_SEC);
      ALTER TABLE  T038_EMPAQUE_SECUNDARIO ADD CONSTRAINT FK_F020_id_T038 FOREIGN KEY (F020_id)  REFERENCES T020_EMPAQUES(id);
      --ALTER TABLE  T038_EMPAQUE_SECUNDARIO ADD CONSTRAINT FK_F021_CODIGO_T038   FOREIGN KEY  (F021_CODIGO)  REFERENCES T021_UNIDAD_CONTENIDO(F021_CODIGO);
   
      --COMMENT ON COLUMN T038_EMPAQUE_SECUNDARIO.F020_CODIGO IS 'FK COIDGO EMPAQUE';
      --COMMENT ON COLUMN T038_EMPAQUE_SECUNDARIO.F038_CANTIDAD_EMPAQUES_PRIMAR IS 'CANTIDAD DE EMPAQUES PRIMARIOS  QUE CONTIENE';
     
	  --COMMENT ON COLUMN T038_EMPAQUE_SECUNDARIO.F021_CODIGO IS 'FK COIDGO UNIDAD_CONTENIDO => CODIGO DE LA UNIDAD_CONTENIDO EJEMPLO   => Cm,G,ML,MT,KG,UND';
      --COMMENT ON COLUMN T038_EMPAQUE_SECUNDARIO.F038_CANTIDAD_CONTENIDO_SEC IS 'EJE: SI LA UNIDAD_CONTENIDO ES ML  Y EL FRASCO E x 100 ml  AQUI IRA 100,SI LA UNIDAD_CONTENIDO ES UND ENTONCES EQUIVALE AL NUMERO DE UNIDADES POR ENPAQUE';
      
      --INSERTO EMPAQUES SECUNDARIOS    N/A
      
	  
	 SET IDENTITY_INSERT T038_EMPAQUE_SECUNDARIO ON
	 INSERT INTO   T038_EMPAQUE_SECUNDARIO (id,F020_id,F038_CANTIDAD_EMPAQUES_PRIMAR,F038_DESCRIP_FINAL_EMP_SEC)  VALUES  (0,0,1,'N/A');
     SET IDENTITY_INSERT T038_EMPAQUE_SECUNDARIO OFF
	       
       
		  --  CREATE OR REPLACE TRIGGER TGR_T038_EMPAQUE_SECUNDARIO
		  --  BEFORE INSERT ON T038_EMPAQUE_SECUNDARIO 
		  --  FOR EACH ROW 
		  --  BEGIN
		  --     IF  :NEW.F038_CODIGO  IS NULL THEN
		  --       SELECT SQ_T038_EMP_SEC_F038_CODIGO.NEXTVAL INTO :NEW.F038_CODIGO FROM DUAL;
		  --     END IF;
		  --  END;
		  --/             
      
      

    
    CREATE TABLE T023_VIA_ADMINISTRACION (
      id NUMERIC(4,0)  NOT NULL identity(1,1) ,
      F023_DESCRIPCION VARCHAR(60) NOT  NULL    ,  --IDX  UNICO
    PRIMARY KEY(id));
    
    --CREATE SEQUENCE  SQ_T023_VIA_ADMN_F023_CODIGO  MINVALUE 1 MAXVALUE 9999999 INCREMENT BY 1 START WITH 1 NOCACHE  ORDER  NOCYCLE ; 
    
    CREATE UNIQUE INDEX T023_F023_DESCRIPCION_IDX ON T023_VIA_ADMINISTRACION (F023_DESCRIPCION);
    
	SET IDENTITY_INSERT T023_VIA_ADMINISTRACION ON
	INSERT INTO  T023_VIA_ADMINISTRACION VALUES  (0,'N/A'); 
    SET IDENTITY_INSERT T023_VIA_ADMINISTRACION OFF
   
   
  

    
    
    CREATE TABLE T032_LINEA (
      id NUMERIC(4,0)  NOT NULL identity(3,1) ,  --  FALTA CREAR LA SECUENCIA
      F032_DESCRIPCION VARCHAR(60)  NOT NULL    ,  -- IDX UNICO 
     PRIMARY KEY(id));
     
     ---CREATE SEQUENCE  SQ_T032_LINEA_F032_CODIGO  MINVALUE 1 MAXVALUE 9999999 INCREMENT BY 1 START WITH 1 NOCACHE  ORDER  NOCYCLE ; 
     
     CREATE UNIQUE INDEX T032_F032_DESCRIPCION_IDX ON T032_LINEA (F032_DESCRIPCION);
     

	SET IDENTITY_INSERT T032_LINEA ON
		INSERT INTO  T032_LINEA VALUES  (0,'N/A'); 
		INSERT INTO  T032_LINEA VALUES  (1,'MARCA'); 
		INSERT INTO  T032_LINEA VALUES  (2,'GENERICO'); 
    SET IDENTITY_INSERT T032_LINEA OFF
  
     
     --  todos los productos deben tener un laboratorio  asignado es el creador  del producto
     CREATE TABLE T027_LABORATORIO (
      id NUMERIC(4,0)  NOT NULL identity(1,1),--FALTA CREAR LA SECUENCIA
      F027_NOMBRE_LAB VARCHAR(60)  NULL  ,
      F027_DIRECCION VARCHAR(100)  NULL  ,
      NIT VARCHAR(20)  NULL     
    PRIMARY KEY(id));
    
    --CREATE SEQUENCE  SQ_T027_LABOT_F027_CODIGO  MINVALUE 1 MAXVALUE 9999999 INCREMENT BY 1 START WITH 1 NOCACHE  ORDER  NOCYCLE ; 
    
    CREATE UNIQUE INDEX T027_F027_NOMBRE_LAB_IDX ON T027_LABORATORIO (F027_NOMBRE_LAB);
    CREATE UNIQUE INDEX T027_NIT_IDX ON T027_LABORATORIO (NIT);

	
	SET IDENTITY_INSERT T027_LABORATORIO ON
	INSERT INTO T027_LABORATORIO  VALUES(0,'N/A','N/A',0);
    SET IDENTITY_INSERT T027_LABORATORIO OFF

---  GRUPOS  Y SUBGRUPOS

       CREATE TABLE T041_GRUPO (
        id NUMERIC(4,0)  NOT NULL  IDENTITY(1,1) ,
        F041_DESCRIPCION VARCHAR(60)  NOT NULL    ,
      PRIMARY KEY(id));

		  --CREATE SEQUENCE  SQ_T041_GRUPO_F041_CODIGO  MINVALUE 1 MAXVALUE 9999999 INCREMENT BY 1 START WITH 1 NOCACHE  ORDER  NOCYCLE ; 
      
		  CREATE UNIQUE INDEX T041_F041_DESCRIPCION_IDX ON T041_GRUPO (F041_DESCRIPCION);
		   --COMMENT ON COLUMN T041_GRUPO.F041_CODIGO IS 'FK COIDGO DEL GRUPO';
          
		  
	    SET IDENTITY_INSERT T041_GRUPO ON
		INSERT INTO  T041_GRUPO VALUES  ('0','N/A'); 
        SET IDENTITY_INSERT T041_GRUPO OFF
         
      
     CREATE TABLE T042_SUBGRUPO1 (
      id NUMERIC(4,0)  NOT NULL  IDENTITY(1,1) ,
      F041_id VARCHAR(4)  NOT NULL  , -- FK  COIDGO DEL GRUPO'
      F042_DESCRIPCION VARCHAR(60)  NOT NULL    ,
    PRIMARY KEY(id));
    
      --CREATE SEQUENCE  SQ_T042_SUBGRUPO1_F042_CODIGO  MINVALUE 1 MAXVALUE 9999999 INCREMENT BY 1 START WITH 1 NOCACHE  ORDER  NOCYCLE ; 
      
      CREATE UNIQUE INDEX T042_F042_DESCRIPCION_IDX ON T042_SUBGRUPO1 (F042_DESCRIPCION);
      ALTER TABLE  T042_SUBGRUPO1 ADD CONSTRAINT FK_F041_id_T042 FOREIGN KEY  (F041_id)  REFERENCES T041_GRUPO (id);
     -- COMMENT ON COLUMN T042_SUBGRUPO1.F041_CODIGO IS 'FK COIDGO DEL GRUPO';
      
	  SET IDENTITY_INSERT T042_SUBGRUPO1 ON
	  INSERT INTO  T042_SUBGRUPO1 VALUES  ('0',0,'N/A'); 
      SET IDENTITY_INSERT T042_SUBGRUPO1 OFF
      
      
      
      CREATE TABLE T043_SUBGRUPO2 (
      id NUMERIC(6,0)  NOT NULL  IDENTITY(1,1) , -- ' CODIGO DEL SUBGRUPO2'
      F042_id VARCHAR(4)  NOT NULL  , --FK COIDGO DEL SUBGRUPO1'
      -- F041_CODIGO VARCHAR(4)  NOT NULL  ,   --FK COIDGO DEL GRUPO'
      F043_DESCRIPCION VARCHAR(60)  NOT NULL    ,  --  DECRIPCION  DEL  SUBGRUPO 2
    PRIMARY KEY(id));
    
       -- CREATE SEQUENCE  SQ_T043_SUBGRUPO2_F043_CODIGO  MINVALUE 1 MAXVALUE 9999999 INCREMENT BY 1 START WITH 1 NOCACHE  ORDER  NOCYCLE ; 
       
        CREATE UNIQUE INDEX T043_F043_DESCRIPCION_IDX ON T043_SUBGRUPO2 (F043_DESCRIPCION);
        ALTER TABLE  T043_SUBGRUPO2 ADD CONSTRAINT FK_F042_id_T043 FOREIGN KEY  (F042_id)  REFERENCES T042_SUBGRUPO1 (id);
        --COMMENT ON COLUMN T043_SUBGRUPO2.F042_CODIGO IS 'FK COIDGO DEL SUBGRUPO';
          
	    SET IDENTITY_INSERT T043_SUBGRUPO2 ON
		INSERT INTO  T043_SUBGRUPO2 VALUES  ('0',0,'N/A'); 
        SET IDENTITY_INSERT T043_SUBGRUPO2 OFF
        
        
-----------------

   -----------  CATEGORIAS  ---------------------
   
    CREATE TABLE T030_CATEGORIA (
     id NUMERIC(4,0)  NOT NULL identity(1,1)  ,  ---PK
     F030_DESCRIPCION VARCHAR(100)  NULL    ,
   PRIMARY KEY(id));
   
   --CREATE SEQUENCE  SQ_T030_CATEGORIA_F030_CODIGO  MINVALUE 1 MAXVALUE 9999999 INCREMENT BY 1 START WITH 1 NOCACHE  ORDER  NOCYCLE ; 
   

     CREATE UNIQUE INDEX T030_F030_DESCRIPCION_IDX ON T030_CATEGORIA (F030_DESCRIPCION);   
     --COMMENT ON COLUMN T030_CATEGORIA.F030_CODIGO IS 'FK COIDGO LA  CATEGORIA';

       
  --  CREATE OR REPLACE TRIGGER TGR_T030_CATEGORIA 
  --  BEFORE INSERT ON T030_CATEGORIA 
  --  FOR EACH ROW 
  --  BEGIN
  --    IF  :NEW.F030_CODIGO  IS NULL THEN
  --     SELECT SQ_T030_CATEGORIA_F030_CODIGO.NEXTVAL INTO :NEW.F030_CODIGO FROM DUAL;
  --    END IF; 
  --  END;
  --/
    
	   
    CREATE TABLE T044_SUBCATEGORIA1 (
      id NUMERIC(4,0)   NOT NULL  identity(1,1), --PK  Auto Incrementable  FUNCION  CRUD_MAESTRO_DETALLE DELPHI
      F030_id NUMERIC(4,0)  NOT NULL  ,  -- FK  CODIGO  DE LA CATEGORIA
      F044_DESCRIPCION VARCHAR(100) NOT  NULL    ,
    PRIMARY KEY(id));
    
		  --  --CREATE SEQUENCE  SQ_T044_SUBCATEG_F044_CODIGO  MINVALUE 1 MAXVALUE 9999999 INCREMENT BY 1 START WITH 1 NO CACHE  NOCYCLE ; 
    
		  --  CREATE OR REPLACE TRIGGER TGR_T044_SUBCATEGORIA1 
		  --  BEFORE INSERT ON T044_SUBCATEGORIA1 
		  --  FOR EACH ROW 
		  --  BEGIN
		  --     IF  :NEW.F044_CODIGO  IS NULL THEN
		  --       SELECT SQ_T044_SUBCATEG_F044_CODIGO.NEXTVAL INTO :NEW.F044_CODIGO FROM DUAL;
		  --     END IF;
		  --  END;
		  --/
      CREATE UNIQUE INDEX T044_F044_DESCRIPCION_IDX ON T044_SUBCATEGORIA1 (F044_DESCRIPCION);   

      ALTER TABLE  T044_SUBCATEGORIA1 ADD CONSTRAINT FK_F030_id_T044 FOREIGN KEY  (F030_id)  REFERENCES T030_CATEGORIA(id);
    --  COMMENT ON COLUMN T044_SUBCATEGORIA1.F030_CODIGO IS 'FK COIDGO LA  CATEGORIA';
      
      
      
      CREATE TABLE T045_SUBCATEGORIA2 (
        id NUMERIC(4,0)  NOT NULL  identity(1,1) ,
        F044_id NUMERIC(4,0)   NOT NULL  ,  --'FK COIDGO LA  SUBCATEGORIA1';
        F045_DESCRIPCION VARCHAR(100)  NULL    ,
      PRIMARY KEY(id));
        
			--CREATE SEQUENCE  SQ_T045_SUBCATEG2_F045_CODIGO  MINVALUE 1 MAXVALUE 9999999 INCREMENT BY 1 START WITH 1 NOCACHE  ORDER  NOCYCLE ; 
      
			  --  CREATE OR REPLACE TRIGGER TGR_T045_SUBCATEGORIA2
			  --  BEFORE INSERT ON T045_SUBCATEGORIA2 
			  --  FOR EACH ROW 
			  --  BEGIN
			  --     IF  :NEW.F045_CODIGO  IS NULL THEN
			  --       SELECT SQ_T045_SUBCATEG2_F045_CODIGO.NEXTVAL INTO :NEW.F045_CODIGO FROM DUAL;
			  --     END IF;
			  --  END;
			  --/
      
      CREATE UNIQUE INDEX T045_F045_DESCRIPCION_IDX ON T045_SUBCATEGORIA2 (F045_DESCRIPCION);   

      ALTER TABLE  T045_SUBCATEGORIA2 ADD CONSTRAINT FK_F044_id_T045 FOREIGN KEY  (F044_id)  REFERENCES T044_SUBCATEGORIA1(id);

      --COMMENT ON COLUMN T045_SUBCATEGORIA2.F044_CODIGO IS 'FK COIDGO LA  SUBCATEGORIA1';
 
          -- NO SON AUTOINCREMENTABLE
		CREATE TABLE T028_SUFIJOS_PRODUCTOS (
			id VARCHAR(4)  NOT NULL ,   --ejemplo  :  E
			F028_DESCRIPCION VARCHAR(30)  NULL ,     --  => compra emergente
		PRIMARY KEY(id));


		--COMMENT  ON COLUMN T028_SUFIJOS_PRODUCTOS.F028_CODIGO  IS  ' EJEM   :  E';
		--COMMENT  ON COLUMN T028_SUFIJOS_PRODUCTOS.F028_DESCRIPCION  IS  ' EJEM   :   COMPRA EMERGENTE';

		
CREATE TABLE T046_Unidad_Medida_MX_Estand (
  id NUMERIC(5,0)  NOT NULL identity(1,1),
  F046_DESCRIPCION VARCHAR(50)  NOT NULL    ,
PRIMARY KEY(id));

   --CREATE SEQUENCE  SQ_T046_UM_MX_Stnd_F046_CODIGO  MINVALUE 1 MAXVALUE 9999999 INCREMENT BY 1 START WITH 1 NO CACHE    NO CYCLE ; 

   INSERT INTO  T046_Unidad_Medida_MX_Estand VALUES  (0,'N/A'); 


          -- (UND, EPR, EPS)
-- esta tabla es de solo lectura   OJOOOOOOO
CREATE TABLE T052_MODOS_COMPRA_VENTA ( 
  id VARCHAR(3)  NOT NULL  ,
  F052_DESCRIPCION VARCHAR(14)  NOT NULL    ,
PRIMARY KEY(id));

	INSERT INTO T052_MODOS_COMPRA_VENTA VALUES (1,'UND');  -- UNIDAD
	INSERT INTO T052_MODOS_COMPRA_VENTA VALUES (1,'EPR'); -- EMPAQUE PRIMARIO
	INSERT INTO T052_MODOS_COMPRA_VENTA VALUES (1,'EPS');   --EMPAQUE SECUNDARIO



        
        CREATE TABLE T011_BODEGA (
          id NUMERIC(5,0)  NOT NULL  IDENTITY(1,1) ,   --PK
          F011_NOMBRE_BODEGA VARCHAR(80)  NULL  ,
          DIRECCION VARCHAR(70)  NULL  ,
          TELEFONO VARCHAR(60)  NULL    ,
		  N_RESPONSABLE numeric(10,0)
		  N_CCOSTOS
		  D_FCREACION
	      S_BORRADO
		  S_ESTADO
        PRIMARY KEY(id));
                
                
		  --      --CREATE SEQUENCE  SQ_T011_BODEGA_F011_CODIGO  MINVALUE 1 MAXVALUE 9999999 INCREMENT BY 1 START WITH 1 NOCACHE  ORDER  NOCYCLE ; 
            
		  --       CREATE OR REPLACE TRIGGER TGR_T011_BODEGA
		  --          BEFORE INSERT ON T011_BODEGA 
		  --          FOR EACH ROW 
		  --          BEGIN
		  --             SELECT SQ_T011_BODEGA_F011_CODIGO.NEXTVAL INTO :NEW.F011_CODIGO FROM DUAL;
		  --          END; 
		  --/

  
    CREATE OR REPLACE TRIGGER TGR_T011_BODEGA_DELETE
    BEFORE DELETE ON T011_BODEGA 
    FOR EACH ROW
    DECLARE EXISTE_BOD_DESTIN_TRSLA   NUMERIC(2,0);
    BEGIN
     -- CUENTA LOS DOCUMENTOS TIPO TR(TRASLADOS)  QUE  TIENEN ESTA BODEGA DESTINO QUE SE VA A ELIMINAR , PARA CONSERVAR LA INTEGRIDAD REFERENCIAL
      SELECT COUNT (*) INTO EXISTE_BOD_DESTIN_TRSLA FROM T048_DOCUMENTO DOC
      INNER  JOIN T012_TIPOS_DOCUMENTOS TIPOS_DOCU   ON (TIPOS_DOCU.F012_TIPO_DOC  = DOC.F012_TIPO_DOC  AND TIPOS_DOCU.F026_CODIGO  = 'TR') 
      WHERE ROWNUM < 5  AND DOC.F048_BODEGA_DESTINO =:OLD.F011_CODIGO;
      
      IF (EXISTE_BOD_DESTIN_TRSLA  >  0 ) THEN -- EXISTE AL MENOS UN DOCUMENTO TR CON BODEGA DESTINO DE ESTA BODEGA QUE SE VA A ELIMINAR ENTOCES NO DEJE Y CONSERVE LA INTEGRIDAD REFERENCIAL  BRAVOOOEJEJE
        RAISE_APPLICATION_ERROR(-20000, 'ERROR: LA BODEGA NO SE PUEDE ELIMINAR PORQUE YA TIENE DOCUMENTOS TR(TRASLADO) , QUE LA TIENEN COMO BODEGA DESTINO.');
      END IF;
    END;
    /


   -----------  **********      PRODUCTO  ****************************

CREATE TABLE T004_PRODUCTO (
    F004_CODIGO VARCHAR(10)  NOT NULL  ,  --PK
 --  BEGIN FK 
    F031_CODIGO VARCHAR(10)  NOT NULL  ,  -- GENERICO 
    F027_CODIGO NUMERIC(4,0)  NOT NULL  ,  -- LABORATORIO
    F037_CODIGO NUMERIC(4,0)  NOT NULL  ,  -- EMPAQUE PRIMARIO
    F038_CODIGO NUMERIC(4,0)  NOT NULL  ,   -- EMPAQUE SECUNDARIO
    F032_CODIGO NUMERIC(4,0)  NOT NULL  ,  --LINEA
    F024_CODIGO VARCHAR(3)  NOT NULL  ,  --  UNIDAD DE MEDIDA
    F023_CODIGO NUMERIC(4,0)  NOT NULL ,    --VIA ADMINISTRACION
    F041_CODIGO VARCHAR(4)  NOT NULL  ,  --  GRUPO
    F042_CODIGO VARCHAR(4)  NOT NULL  ,  --  SUBGRUPO
    F043_CODIGO VARCHAR(6)  NOT NULL  ,  --  SUBGRUPO2
    F030_CODIGO NUMERIC(4,0)  NOT NULL  ,--   CATEGORIA
    F044_CODIGO NUMERIC(4,0)  NOT NULL  , --  SUBCATEGORIA NIVEL 2
    F045_CODIGO NUMERIC(4,0)  NOT NULL  ,   --   SUBCATEGORIA NIVEL 3 
    F046_id NUMERIC(5,0)  NOT NULL,      -- UNIDAD DE MEDICAMENTO ESTANDAR MX
    F052_CODIGO VARCHAR(3) NOT  NULL ,-- FK CHECK ((F004_MODOVENTA_X_DEFECTO  = 'UND')  or  (F004_MODOVENTA_X_DEFECTO  = 'BLT') OR  (F004_MODOVENTA_X_DEFECTO  = 'EPR')  OR  (F004_MODOVENTA_X_DEFECTO  = 'EPS')     ) ,
 -- END  FK
 
  F004_SW_MODOVENTA_X_DEFECTO CHAR(1)  NOT NULL   CHECK ((F004_SW_MODOVENTA_X_DEFECTO  = 'S')  or  (F004_SW_MODOVENTA_X_DEFECTO  = 'N') ) , --INDICA SI SE PUEDE MODIFICAR EL MODO VENTA POR DEFECTO
  F004_NOMBRE_COMERCIAL  VARCHAR(100) NOT NULL,
  F004_DESCRIPCION VARCHAR(300)  NOT NULL  ,
  F004_CODIGOBARRA VARCHAR(20)   NULL  ,--- VALIDAR SI SE DEJA NULL
  
  F004_PRECIO_UNIT NUMERIC(18,3)  NOT NULL  ,
  F004_PRECIO_UNIT_BLISTER NUMERIC(18,3)  NULL  ,
  F004_PRECIO_EMP_PRIM NUMERIC(18,3)  NULL  ,
  F004_PRECIO_EMP_SEC NUMERIC(18,3)  NULL  ,
  
  -- PROVEEDOR  *****---   COSTO  UNITARIO CON IVA EN LA LISTA DEL PROVEEDOR
    F004_COSTO_UND NUMERIC(18,3)  NOT NULL  ,   -- COSTOS UNITARIOS CON IVA DE LA UNIDAD DE INGRESO EJEMPLO PARA TELAS METROS , PARA MEDICAMENTOS UNIDAD UND 
    --F004_COSTO_BLISTER NUMERIC(18,2)  NULL  , -- COSTOS UNITARIOS CON IVA  NO  APLICA PARA COMPRA POR AHORA
    F004_COSTO_EMP_PRIM NUMERIC(18,3)  NULL  ,-- COSTOS UNITARIOS CON IVA
    F004_COSTO_EMP_SEC NUMERIC(18,3)  NULL  ,-- COSTOS UNITARIOS CON IVA
    
   -- PROVEEDOR  *****---  
    
    
    
  F004_PORC_IVA NUMERIC(5,2)  NOT NULL  , -- PORCENTAJE  DE IVA VENTA DEL PRODUCTO
  F004_PORC_IVA_PROVEEDOR NUMERIC(5,2)  NOT NULL  , -- PORCENTAJE  DE IVA COMPRA  DEL PRODUCTO
    
  F004_COSTO_UNIT_ULTIMA_COMPRA NUMERIC(18,3)  NULL  ,
  F004_PORC_IVA_ULTIMA_COMPRA NUMERIC(4,2) NULL,
  
  /*********         PROMEDIO PONDERADO               ************/
      
  F004_COSTO_UNIT_PROM_PONDERADO NUMERIC(14,2)  NULL  , --ES CALCULADO
  F004_COSTOTOTAL_POMD_PONDE  NUMERIC(18,2)NULL,
      
      ---  CANTIDAD EXISTENCIA   ESTA EN LA TABLA   T047_STOCK_LOTES(F147_EXISTENCIAS)
  /*********         PROMEDIO PONDERADO               ************/
  
  F004_UNIDAD_MINIMA NUMERIC(8,2)  NOT NULL  ,  --  UNIDAD MINIMA DE VENTA
  F004_DESCUENTO NUMERIC(4,2)  NOT NULL  ,
  F004_DESCUENTO_MAX NUMERIC(4,2) NOT NULL  ,
  F004_TIPO CHAR(1)  NOT NULL CHECK (F004_TIPO  IN ('I','S') )    ,  --   Tipo de producto(Inventario o servicios)
  F004_ANULADO CHAR(1)  NOT NULL   CHECK ( F004_ANULADO IN ('S','N') )  ,
  F004_PUNTO_REPOSICION NUMERIC(9,0)  NOT NULL  ,-- DEFAULT CERO  (0)
  F004_ES_MEDICAMENTO CHAR(1)  NOT NULL  CHECK  (F004_ES_MEDICAMENTO  IN ('S','N') )    , ---PARA EXIGIR LOTE
  F004_POSOLOGIA VARCHAR(100)  NULL  ,  ----        VALIDAR SI SE DEJA NULL
  F004_SW_FORMULAMEDCIA CHAR(1)  NOT NULL  CHECK (F004_SW_FORMULAMEDCIA   IN ('S','N') ) ,
  F004_APLICA_BLISTER CHAR(1) NOT  NULL    CHECK (F004_APLICA_BLISTER  IN ('S','N') ),
  F004_NRO_BLISTER NUMERIC(3,0)  NULL  ,
  F004_CANTIDAD_X_BLISTER NUMERIC(3,0)  NULL  ,
  F004_CONTROLADO CHAR(1)  NOT NULL    CHECK (  F004_CONTROLADO  IN ('S','N') ),
  F004_DESCONTINUADO CHAR(1)  NOT NULL  CHECK (F004_DESCONTINUADO   IN ('S','N') )    ,
  F004_PROMOCION CHAR(1)  NULL  CHECK (F004_PROMOCION  IN ('S','N') )   , 
  F004_TOPE_FORMULACION NUMERIC(3,0)  NOT NULL  ,
 -- F004_DIAS_MINIMO NUMERIC(4,0) NOT NULL  ,
  --F004_DIAS_MAXIMO NUMERIC(4,0) NOT NULL  ,
  F004_CODIGO_MIN_SALUD VARCHAR(20)  NULL  ,  -- PUEDE SER NULO
  
  F004_REGISTRO_INVIMA VARCHAR(35)   NULL  ,  -- SI NO ES MEDICAMENTO  PUEDE SER NULL
  F004_CUM VARCHAR(20)   NULL  ,-- SI NO ES MEDICAMENTO  PUEDE SER NULL
  
  F004_CLASIFICACION_ABC CHAR(1)  NULL  CHECK (F004_CLASIFICACION_ABC  IN ('A','B','C') )    ,
  F004_REGULADO CHAR(1)     NULL   CHECK (F004_REGULADO  IN ('S','N') )   ,
  F004_CADENA_FRIO CHAR(1)  NOT NULL   CHECK (F004_CADENA_FRIO  IN ('S','N') )  ,
  F004_ALTO_COSTO CHAR(1)  NOT NULL  CHECK (F004_ALTO_COSTO  IN ('S','N') )  ,
  F004_VITAL_NO_DISPONIBLE CHAR(1)   NULL    CHECK (F004_VITAL_NO_DISPONIBLE   IN ('S','N') )   ,
  F004_SALUD_PUBLICA CHAR(1)  NULL   CHECK (F004_SALUD_PUBLICA   IN ('S','N') ),
  F004_MONOPOLIO_ESTADO CHAR(1)  NULL     CHECK (F004_MONOPOLIO_ESTADO  IN ('S','N') ),
  F004_REQUIERE_LOTE  CHAR(1) NOT NULL CHECK (F004_REQUIERE_LOTE  IN ('S','N') ),
  F004_REQUIERE_UBICACION  CHAR(1)   NOT NULL CHECK (F004_REQUIERE_UBICACION  IN ('S','N') ),
  --F004_ES_MENUDEO  CHAR(1)  NOT NULL CHECK(F004_ES_MENUDEO  IN ('S','N') ),
PRIMARY KEY(F004_CODIGO));

      CREATE SEQUENCE  SQ_T004_PRODUCTOS_F004_CODIGO  MINVALUE 1000 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  ORDER  NOCYCLE ;

      ALTER TABLE T004_PRODUCTO ADD CONSTRAINT UQ_PROD_INVIMA UNIQUE (F004_REGISTRO_INVIMA);   -- REGISTRO INVIMA
      CREATE UNIQUE INDEX T034_UQ_PROD_CODBARRA_IDX ON T004_PRODUCTO(F004_CODIGOBARRA);   -- INDICE UNICO  MCOJDIGO DE BARRA
      
      ALTER TABLE T004_PRODUCTO   ADD CONSTRAINT FK_F031_CODIGO_T004   FOREIGN KEY  (F031_CODIGO)  REFERENCES T031_GENERICO(F031_CODIGO);  --  GENERICO 
      ALTER TABLE T004_PRODUCTO   ADD CONSTRAINT FK_F027_CODIGO_T004   FOREIGN KEY  (F027_CODIGO)  REFERENCES T027_LABORATORIO(F027_CODIGO);    -- LABORATORIO
      ALTER TABLE T004_PRODUCTO   ADD CONSTRAINT FK_F037_CODIGO_T004   FOREIGN KEY  (F037_CODIGO)  REFERENCES T037_EMPAQUES_PRIMARIOS(F037_CODIGO);
      ALTER TABLE T004_PRODUCTO   ADD CONSTRAINT FK_F038_CODIGO_T004   FOREIGN KEY  (F038_CODIGO)  REFERENCES T038_EMPAQUE_SECUNDARIO(F038_CODIGO);
      ALTER TABLE T004_PRODUCTO   ADD CONSTRAINT FK_F032_CODIGO_T004   FOREIGN KEY  (F032_CODIGO)  REFERENCES T032_LINEA(F032_CODIGO); 
      ALTER TABLE T004_PRODUCTO   ADD CONSTRAINT FK_F024_CODIGO_T004   FOREIGN KEY  (F024_CODIGO)  REFERENCES T024_UNIDAD_MEDIDA(F024_CODIGO);--  FK  
      ALTER TABLE T004_PRODUCTO   ADD CONSTRAINT FK_F023_CODIGO_T004   FOREIGN KEY  (F023_CODIGO)  REFERENCES T023_VIA_ADMINISTRACION(F023_CODIGO);--  FK  
     --  GRUPOS
      ALTER TABLE T004_PRODUCTO   ADD CONSTRAINT FK_F041_CODIGO_T004   FOREIGN KEY  (F041_CODIGO)  REFERENCES T041_GRUPO(F041_CODIGO);
      ALTER TABLE T004_PRODUCTO   ADD CONSTRAINT FK_F042_CODIGO_T004   FOREIGN KEY  (F042_CODIGO)  REFERENCES T042_SUBGRUPO1(F042_CODIGO);
      ALTER TABLE T004_PRODUCTO   ADD CONSTRAINT FK_F043_CODIGO_T004   FOREIGN KEY  (F043_CODIGO)  REFERENCES T043_SUBGRUPO2(F043_CODIGO);
       --  CATEGORIAS    
      ALTER TABLE T004_PRODUCTO   ADD CONSTRAINT FK_F030_CODIGO_T004   FOREIGN KEY  (F030_CODIGO)  REFERENCES T030_CATEGORIA(F030_CODIGO); 
      ALTER TABLE T004_PRODUCTO   ADD CONSTRAINT FK_F044_CODIGO_T004   FOREIGN KEY  (F044_CODIGO)  REFERENCES T044_SUBCATEGORIA1(F044_CODIGO); --  SUBCATEGOROIA DE  NIVEL 2
      ALTER TABLE T004_PRODUCTO   ADD CONSTRAINT FK_F045_CODIGO_T004   FOREIGN KEY  (F045_CODIGO)  REFERENCES T045_SUBCATEGORIA2(F045_CODIGO); --  SUBCATEGOROIA DE  NIVEL 2
      ALTER TABLE T004_PRODUCTO   ADD CONSTRAINT FK_F046_CODIGO_T004   FOREIGN KEY  (F046_CODIGO)  REFERENCES T046_Unidad_Medida_MX_Estand(F046_CODIGO); --  SUBCATEGOROIA DE  NIVEL 2
      ALTER TABLE T004_PRODUCTO   ADD CONSTRAINT FK_F052_CODIGO_T004   FOREIGN KEY  (F052_CODIGO)  REFERENCES T052_MODOS_COMPRA_VENTA(F052_CODIGO); --   UND  , BILTER , EMP PRIMARIO, EMP SECUNDARIO
    
    COMMENT ON COLUMN T004_PRODUCTO.F031_CODIGO IS 'FK CODIGO GENERICO';
    COMMENT ON COLUMN T004_PRODUCTO.F027_CODIGO IS ' FK LABORATORIO';
    COMMENT ON COLUMN T004_PRODUCTO.F037_CODIGO IS 'FK EMPAQUE  PRIMARIO';
    COMMENT ON COLUMN T004_PRODUCTO.F038_CODIGO IS 'FK EMPAQUE SECUNDARIO';
    COMMENT ON COLUMN T004_PRODUCTO.F032_CODIGO IS 'FK LINEA';
    COMMENT ON COLUMN T004_PRODUCTO.F024_CODIGO IS 'FK UNIDAD DE MEDIDA';
    COMMENT ON COLUMN T004_PRODUCTO.F023_CODIGO IS 'FK VIA DE ADMINISTRACION';
    COMMENT ON COLUMN T004_PRODUCTO.F041_CODIGO IS ' FK GRUPO INVIMA';
    COMMENT ON COLUMN T004_PRODUCTO.F042_CODIGO IS ' FK SUBGRUPO INVIMA';
    COMMENT ON COLUMN T004_PRODUCTO.F043_CODIGO IS ' FK SUBGRUPO2 INVIMA';
    
    COMMENT ON COLUMN T004_PRODUCTO.F030_CODIGO IS 'FK CATEGORIA';
    COMMENT ON COLUMN T004_PRODUCTO.F044_CODIGO IS 'FK SUBCATEGORIA  DE NIVEL 2';
    COMMENT ON COLUMN T004_PRODUCTO.F045_CODIGO IS 'FK SUBCATEGORIA DE NIVEL 3';
    COMMENT  ON COLUMN T004_PRODUCTO.F046_CODIGO   IS   'FK UNIDAD DE  MEDIDA ESTANDAR PARA MX   EJE:  FRASCO  x  100 ML, CAPSULA,  BLISTER';
    COMMENT  ON COLUMN T004_PRODUCTO.F052_CODIGO   IS   'MODO VENTA POR DEFECTO   U = UNIDAD  ,  B = BLISTER  ;   P=  EMPAQUEP  , S =  EMPAQUE SECUNDARIO';
    
    
    ----  COMENTARIOS DE CAMPOS PROPIOS--*******************
    
    COMMENT ON COLUMN  T004_PRODUCTO.F004_PRECIO_UNIT  IS  '(VA EL PRECIO DE LA UNIDAD BASICA DE MEDIDA(LITRO,METRO,KG,UND))';
    COMMENT ON COLUMN  T004_PRODUCTO.F004_PRECIO_UNIT_BLISTER  IS  'PRECIO UNITARIO DEL BLISTER';
    COMMENT ON COLUMN  T004_PRODUCTO.F004_SW_MODOVENTA_X_DEFECTO  IS  'INDICA LSI AL MOMENTO DE LA VENTA SE PUEDE MODIFICAR EL PRECIO    F004_PRECIOU_X_DEFECTO ES DECIR QUE  EN LA INTERFAZ SE PUEDA SELECCIONAR AL MOMENTO DE HACER LA VENTA SE PUEDE MODIFICAR E MODOVENTA_X_DEFECTO POR EJEMPLO : U = UNIDAD ,   B=  BLISTER  .   E  = EMPAQUE  O SE DEJA  LA QUE TIENE EL PRODUCTO POR DEFECTO';
    COMMENT ON COLUMN  T004_PRODUCTO.F004_PROMEDIO_PONDERADO  IS  'COSTO PROMEDIO DEL KARDEX, QUE RESULTA DE SUMAR LOS PRECIOS DE COMPRA DEL PRODUCTO  Y DIVIDIRLOS ENTRE EL TOTAL DE COMPRAS';
    COMMENT ON COLUMN  T004_PRODUCTO.F004_UNIDAD_MINIMA  IS  'UNIDAD MINIMA  DE DISPENSACION 1 ,10   O PARA MENUDEO  (metro = 0,25, kg= 0.125(cuatro onsas 1/4 de libra)    litro = 0,25 , mt2  )';
    COMMENT ON COLUMN  T004_PRODUCTO.F004_PUNTO_REPOSICION  IS  '(<=1000 METROS DE TELA POR EJEMPLO ENUNCIAR ALERTA)';
    COMMENT ON COLUMN  T004_PRODUCTO.F004_ES_MEDICAMENTO  IS  'PARA SABER SI ES SE CONTROLA QUE EL LOTE QUE SE DISPENSE SEA EL DE DEFCHA DE VENCIMIENTO MAS PROXIMA';
    COMMENT ON COLUMN  T004_PRODUCTO.F004_TOPE_FORMULACION IS  'NUMERO MAXIMO DE UNIDADES POR  FORMULACION';
    COMMENT ON COLUMN  T004_PRODUCTO.F004_NRO_BLISTER  IS  'CUANTOS BLISTER TIENE';
   
   -- COMMENT ON COLUMN  T004_PRODUCTO.F004_DIAS_MINIMO  IS  'DIAS MINIMO EN INVENTARIIO FORMULA => vendimos 60 pzas en 30 días vamos a tener que vendemos en promedio 2 pzas por día, y tenemos que el proveedor se tarda en resurtir 15 días, sabemos entonces nuestro mínimo debe de ser 30 piezas en inventario.';
   --COMMENT ON COLUMN  T004_PRODUCTO.F004_DIAS_MAXIMO  IS  'DIAS MAXIMO EN INVENTARIIO  =>Máximo de existencia = Mínimo + Días de Gracia .     ==> Días de Gracia = (Pzas promedio de venta por día) * (Días que podemos soportar en bodega)';
   
     CREATE OR REPLACE TRIGGER TGR_T004_PRODUCTO
            BEFORE INSERT OR UPDATE ON T004_PRODUCTO 
            FOR EACH ROW 
            BEGIN
              IF  :NEW.F004_ES_MEDICAMENTO   = 'S' AND :NEW.F004_REGISTRO_INVIMA IS NULL  THEN 
                RAISE_APPLICATION_ERROR(-20000, 'Error: El Codigo Invima es Obligatorio .');
              END IF;
              
              IF  (:NEW.F004_APLICA_BLISTER   = 'S')  AND  ((NVL(:NEW.F004_NRO_BLISTER,-1) <= 0) OR  (NVL(:NEW.F004_CANTIDAD_X_BLISTER,-1) <= 0) ) THEN
                RAISE_APPLICATION_ERROR(-20000, 'error: APLICA BLISTER, PERO EL NÚMERO O LA CANTIDAD DE BLISTER POR EMPAQUE DEBEN SER MAYORES DE CERO(0).');
              END IF;
            END; 
  /

   
      

 -----------  **********      PRODUCTO  ****************************

    

----  OJOOOOOOOO   SON DE SOLO LECTURA

CREATE TABLE T026_TIPOS_MOVIMIENTO (
  F026_CODIGO VARCHAR (3)  NOT NULL ,  --(C  = ,COMPRA ; F  = FACTURA    .......)
  F026_CONCEPTO VARCHAR(60) NOT   NULL  ,
  F026_TIPO_MOV CHAR(3) NOT  NULL     CHECK  (F026_TIPO_MOV  IN ('E','S','N/A')) ,
  F026_CAPTURAR VARCHAR(9)  NOT NULL  ,
  F026_SGTE_FOLIO VARCHAR(5)  NULL    ,
PRIMARY KEY(F026_CODIGO));

INSERT INTO  T026_TIPOS_MOVIMIENTO  VALUES ('CO','COMPRA','N/A','PROVEEDOR','');
INSERT INTO  T026_TIPOS_MOVIMIENTO VALUES ('EO','ENTRADA CON ORDEN DE COMPRA','E','N/A');
INSERT INTO  T026_TIPOS_MOVIMIENTO  VALUES ('FV','FACTURA DE VENTA','S','CLIENTE','');
INSERT INTO  T026_TIPOS_MOVIMIENTO  VALUES('FS','FACTURA DE SERVICIO','N/A','CLIENTE','');
INSERT INTO  T026_TIPOS_MOVIMIENTO  VALUES  ('NDV','NOTA DEVOLUCION FISICA VENTA','E','N/A','');
INSERT INTO  T026_TIPOS_MOVIMIENTO  VALUES  ('DVP','NOTA DEVOLUCION VENTA POR PERDIDA','N/A','N/A','');   -- PERDIDA DE MERCANCIA EN VENTA

T026_TIPOS_MOVIMENIENTOS

--  PENDIENTE HACER PRUEBAS CUANDO SE IN TENTE ACTUALIZAR EL TIPO DE DOCUMENTO SI YA TIENE REGISTROS RELACIONADOS
CREATE TABLE T012_TIPOS_DOCUMENTOS (
  F012_TIPO_DOC VARCHAR(4)  NOT NULL ,
  F026_CODIGO VARCHAR(3)  NOT NULL  , --FK (C  = ,COMPRA ; F  = FACTURA)
  F012_DESCRIPCION VARCHAR(50)not   NULL    ,
PRIMARY KEY(F012_TIPO_DOC));
ALTER TABLE T012_TIPOS_DOCUMENTOS   ADD CONSTRAINT FK_F026_CODIGO_T012   FOREIGN KEY  (F026_CODIGO)  REFERENCES T026_TIPOS_MOVIMIENTO(F026_CODIGO); --  SUBCATEGOROIA DE  NIVEL 2

 CREATE OR REPLACE TRIGGER TGR_T012_TIPO_DOC_BEFORE
    BEFORE INSERT ON T012_TIPOS_DOCUMENTOS
    FOR EACH ROW 
    declare EXISTE  numeric(2,0);
     CMD VARCHAR(110);
    BEGIN
       SELECT count(*) into EXISTE from all_sequences   WHERE SEQUENCE_NAME    =  'SQ_T012_' || :NEW.F012_TIPO_DOC ; --  VALIDA QUE LA SECUENCIA( TIPÓ DE M) NO EXISTA
       IF NOT (EXISTE   >  0) THEN -- SI NO EXISTE LA SECUENCIA CREELA
         --RAISE_APPLICATION_ERROR(-20010, 'Error  el tipo de documento existe o la secuencia del mismo ya existia ');
         CMD  := ' CREATE SEQUENCE ' || 'SQ_T012_' || TO_CHAR(:NEW.F012_TIPO_DOC) ||   ' MINVALUE 1 MAXVALUE 999999 INCREMENT BY 1 START WITH 1 NOCACHE  ORDER  NOCYCLE' ;
         SP_CRUD_SECUENCIA_DOC (CMD) ;
       END  IF;
    
    END;
    /
     
    CREATE OR REPLACE PROCEDURE SP_CRUD_SECUENCIA_DOC (SECUENCIA IN  VARCHAR  )
    is
    pragma AUTONOMOUS_TRANSACTION;

    BEGIN
      EXECUTE  IMMEDIATE SECUENCIA ;
    END ;
   / 
     -- CREO LA SECUENCIA DINAMICAMENTE DESPUES DE CREAR EL TIPO DE DOCUMENTO
/*  CREATE OR REPLACE TRIGGER TGR_T012_TIPO_DOC_AFTER
    AFTER INSERT ON T012_TIPOS_DOCUMENTOS
    FOR EACH ROW 
    DECLARE CMD VARCHAR(110);
    BEGIN
      CMD  := ' CREATE SEQUENCE ' || 'SQ_T012_' || TO_CHAR(:NEW.F012_TIPO_DOC) ||   ' MINVALUE 1 MAXVALUE 999999 INCREMENT BY 1 START WITH 1 NOCACHE  ORDER  NOCYCLE' ;
      SP_CRUD_SECUENCIA_DOC (CMD) ;
    END;
    /
 */   
    -- BORRO LA SECUENCIA
    CREATE OR REPLACE TRIGGER TGR_T012_TIPO_DOC_AFTER_DEL
    AFTER DELETE ON T012_TIPOS_DOCUMENTOS
    FOR EACH ROW 
    DECLARE CMD VARCHAR(110);
    --EXISTE  numeric(2,0);
    
    BEGIN
         /*SELECT count(*) into EXISTE from all_sequences   WHERE SEQUENCE_NAME    =  'SQ_T012_' || :NEW.F012_TIPO_DOC ; --  VALIDA QUE LA SECUENCIA( TIPÓ DE M) NO EXISTA
          IF EXISTE   >  0 THEN
             RAISE_APPLICATION_ERROR(-20010, 'Error  el tipo de documento existe ');
         END  IF;*/
       CMD  := 'DROP SEQUENCE ' || 'SQ_T012_' || TO_CHAR(:OLD.F012_TIPO_DOC)   ;
       SP_CRUD_SECUENCIA_DOC (CMD) ;
    END;
  /  
  
  -- OJOOO   SE CREA EL DOCUMENTO _PUB DE VENTA AL PUBLICO PARA SELECCIONARLO AUTOMATICAMENTE ESTE PREFIJO _PUB NO LO PUEDE UTILIZAR MAS NADIE
  INSERT INTO T012_TIPOS_DOCUMENTOS  VALUES('_PUB','FV', 'VENTAS PUBLICO');
  
CREATE TABLE T054_TIPOS_PERSONAS (
  F054_CODIGO CHAR(1)  NOT NULL  ,
  F054_DESCRICPCION VARCHAR(8)  NULL    ,
PRIMARY KEY(F054_CODIGO));

CREATE TABLE T055_REGIMEN (
  F055_CODIGO CHAR(1)  NOT NULL   ,
  F055_DESCRPCION VARCHAR(12)  NULL    ,
PRIMARY KEY(F055_CODIGO));



CREATE TABLE T002_TIPOS_IDTF (
  F002_CODIGO NUMERIC(2,0)  NOT NULL  ,
  F002_DESCRIPCION VARCHAR(3)  NULL    ,
PRIMARY KEY(F002_CODIGO));

INSERT INTO T002_TIPOS_IDTF VALUES(1,'T.I');
INSERT INTO T002_TIPOS_IDTF VALUES(2,'C.C');
INSERT INTO T002_TIPOS_IDTF VALUES(3,'PSP');
INSERT INTO T002_TIPOS_IDTF VALUES(4,'NIT');


CREATE TABLE T050_ROLE (
  F050_CODIGO NUMERIC(3,0)  NOT NULL   , --  COD ROL
  F050_NOMBRE_ROL VARCHAR(50)  NOT   NULL  ,
  F050_BODEGAS_ACCESO CHAR(1)  NOT NULL CHECK (F050_BODEGAS_ACCESO  IN ('1','0'))  , --  1  =  ACCESO A TODAS LAS  BODEGAS        0  =  SOLO A LA QUE TIEN ASIGNADA EN LA TABLA T013_USUARIOS
PRIMARY KEY(F050_CODIGO));

INSERT INTO T050_ROLE VALUES (1, 'ADMINISTRADOR',1);
INSERT INTO T050_ROLE VALUES (2, 'ALMACENISTA',0);
INSERT INTO T050_ROLE VALUES (3, 'COMPRAS',0);
INSERT INTO T050_ROLE VALUES (4, 'JEFE COMPRAS',0);


/*
CREATE SEQUENCE  SQ_T050_ROLE_F050_CODIGO MINVALUE 1 MAXVALUE 9999999 INCREMENT BY 1 START WITH 1 NOCACHE  ORDER  NOCYCLE ; 
    
    CREATE OR REPLACE TRIGGER TGR_T050_ROLE
    BEFORE INSERT ON T050_ROLE
    FOR EACH ROW 
    BEGIN
       SELECT SQ_T050_ROLE_F050_CODIGO.NEXTVAL INTO :NEW.F050_CODIGO FROM DUAL;  -- CAMPO AUTO F013_CODIGO 
    END;
/
*/

--USUARIOS DEL SISTEMA
CREATE TABLE T013_USUARIO (
  F013_CODIGO NUMERIC(6,0)  NOT NULL  ,  --PK  COD USUARIO
  F011_CODIGO NUMERIC(5,0)  NOT NULL  ,  --    COD BODEGA
 -- F050_CODIGO NUMERIC(3,0)  NOT NULL  ,  --  COD ROL
  F002_CODIGO NUMERIC(2,0)  NOT NULL  ,    --  FK COD  TIPO DOCUMENTO
  F013_NRO_IDTF VARCHAR(20)  NOT  NULL  ,
  F013_NOMBRE VARCHAR(25)  NOT   NULL  ,
  F013_APELLIDOS VARCHAR(30) NOT  NULL  ,
  F013_LOGIN VARCHAR(15)    NOT NULL  ,  --- UNICOOOOO
  F013_PASWORD VARCHAR(30) NOT  NULL  ,
  F013_CORREO VARCHAR(60)  NOT NULL  ,
  F013_TELEFONO VARCHAR(60) NOT NULL    ,
PRIMARY KEY(F013_CODIGO));


    ALTER TABLE T013_USUARIO   ADD CONSTRAINT FK_F002_CODIGO_T013   FOREIGN KEY  (F002_CODIGO)  REFERENCES T002_TIPOS_IDTF(F002_CODIGO);  --  GENERICO 
    ALTER TABLE T013_USUARIO   ADD CONSTRAINT FK_F011_CODIGO_T013   FOREIGN KEY  (F011_CODIGO)  REFERENCES T011_BODEGA(F011_CODIGO);  --  GENERICO 
   -- ALTER TABLE T013_USUARIO   ADD CONSTRAINT FK_F050_CODIGO_T013   FOREIGN KEY  (F050_CODIGO)  REFERENCES T050_ROLE(F050_CODIGO);  --  GENERICO 
    
    CREATE UNIQUE INDEX T013_F002_CODIGO_F013_NRO_IDTF ON T013_USUARIO(F013_NRO_IDTF,F002_CODIGO);   -- INDICE UNICO   NRO IDENTIFICACION Y CEDULA    
    CREATE UNIQUE INDEX T013_F013_LOGIN_IDX ON T013_USUARIO(F013_LOGIN);

-- DROP SEQUENCE  SQ_T013_USUARIO_F013_CODIGO
CREATE SEQUENCE  SQ_T013_USUARIO_F013_CODIGO  MINVALUE 1 MAXVALUE 9999999 INCREMENT BY 1 START WITH 1 NOCACHE  ORDER  NOCYCLE ; 
    
    CREATE OR REPLACE TRIGGER TGR_T013_USUARIO
    BEFORE INSERT ON T013_USUARIO 
    FOR EACH ROW 
    BEGIN
      IF :NEW.F013_CODIGO IS NULL THEN 
        SELECT SQ_T013_USUARIO_F013_CODIGO.NEXTVAL INTO :NEW.F013_CODIGO FROM DUAL;  -- CAMPO AUTO F013_CODIGO 
      END IF; 
    END;
/



CREATE TABLE T013_USU_T050_ROL (
  F013_CODIGO NUMERIC(6,0)  NOT NULL  , -- COD USUARIO
  F050_CODIGO NUMERIC(3,0)  NOT NULL    , -- ROLES
PRIMARY KEY(F013_CODIGO, F050_CODIGO));

INSERT INTO T013_USUARIO (F013_CODIGO,F011_CODIGO,F002_CODIGO,F013_NRO_IDTF,F013_NOMBRE,F013_APELLIDOS,F013_LOGIN,F013_PASWORD,F013_CORREO,F013_TELEFONO)
 VALUES (1,1,2,92033351,'JHOANA PATRICIA', 'GUERRA','JORSIS77','92033351','ING_JOSEMAR100@HOTMAIL.COM','3124567098');
 
 INSERT INTO T013_USU_T050_ROL(F013_CODIGO,F050_CODIGO) VALUES (1,1);  -- AL USUARIO 1(USUARIO ME LO DA EL CLIENTE) LE ASIGNO EL ROL DE ADMINISTRADOR



-- CLIENTES  

CREATE TABLE T039_CLIENTE (
  F039_CODIGO NUMERIC(8,0)   NOT NULL ,
  F002_CODIGO NUMERIC(2,0)  NOT NULL  ,    --  FK COD  TIPO DOCUMENTO(NIT,C.C, )
  F039_NRO_IDTF VARCHAR(20)  NOT  NULL  , -- NRO IDENTIFICACION DOCUMENTO     
  F039_RAZON_SOCIAL VARCHAR(100) NOT  NULL  , -- RAZON SOCIAL O NOMBRE DEL CLIENTE
  
  F039_DIRECCION VARCHAR(80) NOT NULL  ,
  F039_TELEFONO VARCHAR(60) NOT NULL  ,
  F039_PAGINA_WEB VARCHAR(60) NOT   NULL  ,
  F039_CORREO VARCHAR(60) NOT  NULL  ,
  F039_REGIMEN CHAR(1) NOT  NULL   CHECK  ( F039_REGIMEN IN ('C','S')) ,
  F039_TIPO_PERSONA CHAR(1) NOT NULL  CHECK  ( F039_TIPO_PERSONA IN ('N','J')) ,
  F039_ES_AUTORRETENEDOR CHAR(1) NOT NULL  ,
  F039_EXCENTO_IVA CHAR(1)  NOT NULL  ,
  F007_ES_GRANCONTRIBUYENTE CHAR(1) NOT NULL,
  CONSTRAINT FK_F002_CODIGO_T039  FOREIGN KEY  (F002_CODIGO) REFERENCES T002_TIPOS_IDTF(F002_CODIGO), -- TIPO DE DOCUMENTO
PRIMARY KEY(F039_CODIGO));

CREATE UNIQUE INDEX T039_F002_COD_F039_NROIDTF_IDX ON T039_CLIENTE(F002_CODIGO ,F039_NRO_IDTF); 

COMMENT ON COLUMN  T039_CLIENTE.F002_CODIGO  IS  'TIPO DOCUMENTO(NIT,C.C,T.I )';
COMMENT ON COLUMN  T039_CLIENTE.F039_REGIMEN  IS  'C = REGIME COMUN   S  = SIMPLIFICADO';
COMMENT ON COLUMN  T039_CLIENTE.F039_TIPO_PERSONA IS  ' N= Natural Juridica   J  =  JURIDICA';

CREATE SEQUENCE  SQ_T039_CLIENTE_F039_CODIGO  MINVALUE 1 MAXVALUE 9999999 INCREMENT BY 1 START WITH 1 NOCACHE  ORDER  NOCYCLE ; 
    
    CREATE OR REPLACE TRIGGER TGR_T039_CLIENTE
    BEFORE INSERT ON T039_CLIENTE 
    FOR EACH ROW 
    BEGIN
       IF :NEW.F039_CODIGO IS NULL THEN
         SELECT SQ_T039_CLIENTE_F039_CODIGO.NEXTVAL INTO :NEW.F039_CODIGO FROM DUAL;
       END IF;  
    END; 
    /
--INSETRTA CLIENTE PUBLICO((F002_CODIGO,F039_NRO_IDTF) => 2,-1
  INSERT INTO T039_CLIENTE(F039_CODIGO,F002_CODIGO,F039_NRO_IDTF,F039_RAZON_SOCIAL,F039_DIRECCION,F039_TELEFONO,F039_PAGINA_WEB,F039_CORREO,F039_REGIMEN,F039_TIPO_PERSONA,F039_ES_AUTORRETENEDOR,F039_EXCENTO_IVA,F007_ES_GRANCONTRIBUYENTE) 
  VALUES(1,2,-1,'PUBLICO',' ',0,' ',' ','S','N','N','N','N');
  
  
 
-- BODEGAS DE CLIENTES
CREATE TABLE  T057_BODEGAS_CLIENTE(
  F057_CODIGO NUMERIC(5,0) PRIMARY KEY,
  F039_CODIGO NUMERIC(8,0)NOT NULL, -- FK CODIGO DEL CLIENTE
  F057_DESCRIPCION VARCHAR(50),
  F058_CODIGO NUMERIC(3,0)  ,  --PAIS,
  F059_CODIGO NUMERIC(3,0),  -- DEPARTAMENTO 
  F060_CODIGO NUMERIC(3,0),    --CIUDAD

  CONSTRAINT   FK_F039_CODIGO_T057  FOREIGN KEY (F039_CODIGO) REFERENCES T039_CLIENTE(F039_CODIGO),  -- FK CODIGO DEL CLIENTE
  --UBUCACION 
  CONSTRAINT   FK_F058_CODIGO_T057  FOREIGN KEY (F058_CODIGO) REFERENCES T058_PAIS(F058_CODIGO), --PAIS
  CONSTRAINT   FK_F059_CODIGO_T057 FOREIGN KEY (F059_CODIGO) REFERENCES T059_DEPARTAMENTOS(F059_CODIGO), --DEPATAMENTO
  CONSTRAINT   FK_F060_CODIGO_T057 FOREIGN KEY (F060_CODIGO) REFERENCES T060_CIUDAD(F060_CODIGO)  --CIUDAD
);
  
  
  
CREATE SEQUENCE  SQ_T057_BOD_CLIENT_F057_COD MINVALUE 1 MAXVALUE 9999999 INCREMENT BY 1 START WITH 2 NOCACHE  ORDER  NOCYCLE ; 
    
    CREATE OR REPLACE TRIGGER TGR_T057_BOD_CLIET
    BEFORE INSERT ON T057_BODEGAS_CLIENTE 
    FOR EACH ROW 
    BEGIN
       IF :NEW.F057_CODIGO IS NULL THEN
         SELECT SQ_T057_BOD_CLIENT_F057_COD.NEXTVAL INTO :NEW.F057_CODIGO FROM DUAL;
       END IF;
    END; 
    /
    
  INSERT INTO T057_BODEGAS_CLIENTE(F039_CODIGO,F057_DESCRIPCION,F058_CODIGO,F059_CODIGO,F060_CODIGO) VALUES (1,'BODEGA PUBLICA',0,0,0) ;  
    
    
    CREATE OR REPLACE TRIGGER TGR_T057_DELETE
    BEFORE DELETE ON T057_BODEGAS_CLIENTE 
    FOR EACH ROW
    DECLARE EXISTE_BOD_CLIENTE   NUMERIC(2,0);
    BEGIN
     -- CUENTA LOS DOCUMENTOS FV  QUE  TIENEN ESTA BODEGA QUE SE VA A ELIMINAR , PARA CONSERVAR LA INTEGRIDAD REFERENCIAL
      SELECT COUNT (*) INTO EXISTE_BOD_CLIENTE FROM T048_DOCUMENTO DOC
      INNER  JOIN T012_TIPOS_DOCUMENTOS TIPOS_DOCU   ON (TIPOS_DOCU.F012_TIPO_DOC  = DOC.F012_TIPO_DOC  AND TIPOS_DOCU.F026_CODIGO  = 'FV')
      WHERE ROWNUM < 5  AND DOC.F048_BODEGA_DESTINO =:OLD.F057_CODIGO ;
      
      IF (EXISTE_BOD_CLIENTE  >  0 ) THEN
        RAISE_APPLICATION_ERROR(-20000, 'ERROR: LA BODEGA DEL CLIENTE NO SE PUEDE ELIMINAR PORQUE YA TIENE DOCUMENTOS FV , QUE LA TIENEN COMO BODEGA DESTINO.');
      END IF;
    END;
    
    /
    
    
CREATE TABLE T007_PROVEEDOR (F007_CODIGO NUMERIC(5,0)  NOT NULL   ,
  F007_NIT VARCHAR(15)  NOT NULL  ,
  F007_RAZON_SOCIAL VARCHAR(100) NOT  NULL  ,
  F007_TELEFONO VARCHAR(20) NOT  NULL  ,
  F007_DIRECCION VARCHAR(50) NOT NULL  ,
  F007_PAGINA_WEB VARCHAR(60)   NULL  ,
  F007_CORREO VARCHAR(60) NOT  NULL  ,
  F007_REGIMEN CHAR(1) NOT  NULL CHECK  (F007_REGIMEN  IN ('C','S'))  ,  --C = REGIME COMUN   S  = SIMPLIFICADO
  F007_TIPO_PERSN CHAR(1) NOT  NULL  CHECK  ( F007_TIPO_PERSN IN ('N','J')) , --  N= Natural Juridica   J  =  JURIDICA
  F007_ES_AUTORRETENDOR CHAR(1) NOT  NULL  ,
  --F007_EXCENTO_IVA CHAR(1) NOT  NULL  ,
  F007_ES_GRANCONTRIBUYENTE CHAR(1) NOT  NULL    ,
PRIMARY KEY(F007_CODIGO));

COMMENT ON COLUMN  T007_PROVEEDOR.F007_REGIMEN  IS  'C = REGIME COMUN   S  = SIMPLIFICADO';
COMMENT ON COLUMN  T007_PROVEEDOR.F007_TIPO_PERSN IS  ' N= Natural Juridica   J  =  JURIDICA';

  
CREATE SEQUENCE  SQ_T007_PROVEEDOR_F007_CODIGO  MINVALUE 1 MAXVALUE 9999999 INCREMENT BY 1 START WITH 1 NOCACHE  ORDER  NOCYCLE ; 
   
    CREATE OR REPLACE TRIGGER TGR_T007_PROVEEDOR 
    BEFORE INSERT ON T007_PROVEEDOR 
    FOR EACH ROW 
    BEGIN
       SELECT SQ_T007_PROVEEDOR_F007_CODIGO.NEXTVAL INTO :NEW.F007_CODIGO FROM DUAL;
    END; 
    /
 
 INSERT INTO  T007_PROVEEDOR   VALUES (0,'0','N/A','0','0','0','0','S','N','N','N') ;  
    
    
 

CREATE TABLE T051_ESTADOS_COMPRA (
  F051_CODIGO CHAR(1)  NOT NULL  ,
  F051_DESCRICPCION VARCHAR(10)  NOT NULL    ,
PRIMARY KEY(F051_CODIGO));

INSERT INTO T051_ESTADOS_COMPRA VALUES('C','CREACION');
INSERT INTO T051_ESTADOS_COMPRA VALUES('E','ENVIADA');
INSERT INTO T051_ESTADOS_COMPRA VALUES('D','DEFINITIVA');
INSERT INTO T051_ESTADOS_COMPRA VALUES('A','ANULADA');

   CREATE TABLE T047_STOCK_LOTES (
    F047_CODIGO NUMERIC(10,2)  NOT NULL ,
    F011_CODIGO NUMERIC(5,0)  NOT NULL  ,
    F004_CODIGO VARCHAR(10)  NOT NULL  ,
    F047_LOTE VARCHAR(15)  NULL  ,
    F047_EXISTENCIAS NUMERIC(15,2) NOT NULL  ,
    F047_FECHA_VENCIMIENTO DATE  NULL  ,
    F047_FECHA_FABRICACION DATE  NULL    ,
  PRIMARY KEY(F047_CODIGO));
  
    CREATE SEQUENCE  SQ_T047_STOCK_LOTE_F047_CODIGO MINVALUE 1 MAXVALUE 99999999 INCREMENT BY 1 START WITH 1 NOCACHE  ORDER  NOCYCLE ; 
            
          CREATE OR REPLACE TRIGGER TGR_T047_STOCK_LOTES
            BEFORE INSERT ON T047_STOCK_LOTES 
            FOR EACH ROW 
            BEGIN
               SELECT SQ_T047_STOCK_LOTE_F047_CODIGO.NEXTVAL INTO :NEW.F047_CODIGO FROM DUAL;
              -- SELECT (max (F049_ITEM) +1)  INTO :NEW.F049_ITEM FROM T049_DET_COMPRA  WHERE F048_CODIGO   = :NEW.F048_CODIGO ;
            END; 
       /

CREATE UNIQUE INDEX T047_BODEGA_PROD_LOTE_IDX ON T047_STOCK_LOTES(F011_CODIGO,F004_CODIGO, F047_LOTE); 

 ALTER TABLE T047_STOCK_LOTES   ADD CONSTRAINT FK_F011_CODIGO_T047   FOREIGN KEY  (F011_CODIGO)  REFERENCES T011_BODEGA(F011_CODIGO);  --  GENERICO 
 ALTER TABLE T047_STOCK_LOTES   ADD CONSTRAINT FK_F004_CODIGO_T047 FOREIGN KEY  (F004_CODIGO)  REFERENCES T004_PRODUCTO (F004_CODIGO);  --  GENERICO 
    
    
    
    
    CREATE TABLE T061_LISTACLIENTES (
      F061_CODIGO NUMERIC(6,0)   PRIMARY KEY NOT NULL  ,-- ID   AUTO 
      F039_CODIGO NUMERIC(8,0)  NOT NULL  , --  FK ID DEL CLIENTE
      F061_NROLISTA NUMERIC(4,0)  NOT NULL,  --   NUMERO DE LA LISTA
      F061_DESCRIPCION VARCHAR(50) NOT  NULL  ,
      F061_FECHA_CREACION DATE  NOT  NULL    
    );
    INSERT INTO  T061_LISTACLIENTES VALUES  (1,1,1,'LISTA_CLIE_PUBLICO',SYSDATE);
    CREATE UNIQUE INDEX T061_CLIENT_NROLIST_IT ON T061_LISTACLIENTES(F039_CODIGO, F061_NROLISTA);   -- INDICE UNICO
    
    CREATE SEQUENCE  SQ_T061_LISTACLIE_F061_CODIGO MINVALUE 1 INCREMENT BY 1 START WITH 2 NOCACHE  ORDER  NOCYCLE ; 
    
     CREATE OR REPLACE TRIGGER TGR_T061_LISTACLIENTES
            BEFORE INSERT ON T061_LISTACLIENTES 
            FOR EACH ROW 
            DECLARE   EXISTE_CLIE NUMERIC(3,0);
               
            BEGIN
              --VALIDO QUE EL CLIENTE EXISTA
                SELECT COUNT(*)  INTO EXISTE_CLIE  FROM T039_CLIENTE
                WHERE F039_CODIGO = :NEW.F039_CODIGO   ;
            
             --  IF EXISTE EL CLIENTE
             
               IF NOT (EXISTE_CLIE > 0) THEN 
                 RAISE_APPLICATION_ERROR(-20000, 'ERROR EL CLIENTE NO EXISTE.');
               END IF;
   
               :NEW.F061_FECHA_CREACION  := SYSDATE;
          --  ID  F049_CODIGO   AUTO GEN
               SELECT SQ_T061_LISTACLIE_F061_CODIGO.NEXTVAL INTO :NEW.F061_CODIGO FROM DUAL;
              -- SELECT (max (F049_ITEM) +1)  INTO :NEW.F049_ITEM FROM T049_DET_COMPRA  WHERE F048_CODIGO   = :NEW.F048_CODIGO ;
           END  ;  
       /

       /************  AUTO IN  F049_CODIGO ************/
        
            

   
    
  CREATE TABLE T062_DETLISTA_CLIE (
    F062_CODIGO NUMERIC(12,0)  NOT NULL   PRIMARY KEY    ,  --- AUTO
    F061_CODIGO NUMERIC(6,0)  NOT NULL  ,  --FK CLIENTE  (INDICE DE CADA UNA DE LAS LISTAS DE UN CLIENTE)
    F004_CODIGO VARCHAR(10) NOT NULL, -- FK PRODUCTO
    F052_CODIGO VARCHAR(3),  --FK  MODO DE VENTA POR DEFECTO (UND , BLISTER ,EMP PRIMARIO, EMP SECUNDARIO)
    F062_SW_MODOVENTA_X_DEFECTO CHAR(1),--(S = SE PUEDE EDITAR  N= NO SE PUEDE EDITAR)INDICA SI AL MOMENTO DE LA VENTA SE PUEDE MODIFICAR EL PRECIO    F004_PRECIOU_X_DEFECTO ES DECIR QUE  EN LA INTERFAZ SE PUEDA SELECCIONAR AL MOMENTO DE HACER LA VENTA SE PUEDE MODIFICAR E MODOVENTA_X_DEFECTO POR EJEMPLO : U = UNIDAD ,   B=  BLISTER  .   E  = EMPAQUE  O SE DEJA  LA QUE TIENE EL PRODUCTO POR DEFECTO
    
    
    F062_PRECIO_UNIT NUMERIC(18,3)  NOT NULL  ,
    F062_PRECIO_UNIT_BLISTER NUMERIC(18,3) NOT NULL  ,
    F062_PRECIO_EMP_PRIM NUMERIC(18,3) NOT NULL  ,
    F062_PRECIO_EMP_SEC NUMERIC(18,3)  NOT NULL  ,
    F62_DESCUENTO NUMERIC(4,2) NOT NULL,
    
    F062_PORC_IVA NUMERIC(4,2) NOT NULL,
    
    F062_FECHA_INSERCION DATE  NOT NULL );
  
  CREATE UNIQUE INDEX T062_T062_DETLISTA_CLIE ON T062_DETLISTA_CLIE(F061_CODIGO, F004_CODIGO);   -- INDICE UNICO
  --FL CODIGO DEL CLIENTE F058_CODIGO
   ALTER TABLE  T062_DETLISTA_CLIE  ADD CONSTRAINT FK_F061_COD_T062_DETLISTA_CLIE   FOREIGN KEY (F061_CODIGO) REFERENCES T061_LISTACLIENTES(F061_CODIGO);

   --  FK CODIGO DEL PRODUCTO
   A LTER TABLE  T062_DETLISTA_CLIE  ADD CONSTRAINT FK_F004_COD_T062_DETLISTA_CLIE   FOREIGN KEY (F004_CODIGO) REFERENCES T004_PRODUCTO(F004_CODIGO);
  
  --  FK F052_CODIGO 
  ALTER  TABLE  T062_DETLISTA_CLIE   ADD CONSTRAINT FK_F052_COD_T062_DETLISTA_CLIE   FOREIGN KEY (F052_CODIGO) REFERENCES T052_MODOS_COMPRA_VENTA(F052_CODIGO);
   
  CREATE SEQUENCE  SQ_T062_DETLISTCL_F062_CODIGO MINVALUE 1 INCREMENT BY 1 START WITH 1 NOCACHE  ORDER  NOCYCLE ; 
    
    
    CREATE OR REPLACE TRIGGER  TGR_T062_DETLISTA_CLIE
    BEFORE INSERT ON T062_DETLISTA_CLIE
    FOR EACH ROW
    DECLARE EXISTE NUMERIC(2,0);
    BEGIN
      SELECT COUNT(*) INTO EXISTE FROM  T062_DETLISTA_CLIE WHERE F004_CODIGO  = :NEW.F004_CODIGO  AND F061_CODIGO  =:NEW.F061_CODIGO;
      IF EXISTE >  0 THEN 
          RAISE_APPLICATION_ERROR(-20077, '|Error: El producto ya existe en esta lista.|');
        --dbms_output.put_line('No se permiten valores nulos');
      END IF;
     
      :NEW.F062_FECHA_INSERCION  := SYSDATE;
      SELECT SQ_T062_DETLISTCL_F062_CODIGO.NEXTVAL INTO :NEW.F062_CODIGO FROM DUAL;    
    END;
    
    /


  CREATE TABLE T048_DOCUMENTO (
  F048_CODIGO NUMERIC(12,0)  NOT NULL   , --  PK  AUTO COD COMPRA 
  F012_TIPO_DOC VARCHAR(4)         NOT NULL ,    -- FK   TIPO DE DOCUMENTO
  F048_CONSECUTIVO  NUMERIC(12,0)  NOT NULL   ,  --   SECUENCIA POR TIPO DE DOCUMENTO
  F061_CODIGO NUMERIC(6,0)   NULL,  --   FK  NUMERO DE LA LISTA (PARA FV LA LISTA DE PRECIOS QUE SE ESCOGIO PARA DAR SALIDA ,DEBE SER LA MISMA LISTA DEL PEDIDO QUE SE ESTA DESPACHANDO)
  --F013_CODIGO NUMERIC(4,0)  NOT NULL  ,  -- USUARIO
  
  F011_CODIGO NUMERIC(5,0)  NOT NULL  ,  -- fk   BODEGA (MIS SUCURSALES O BODEGAS INTERNAS)
  
  -- F048_BODEGA_DESTINO =>PARA EVITAR CONFUSIONES CUANDO SE REALICE LA ORDEN DE COMPRA DEJAR ESTA  BODEGA DESTINO EN NULL YA QUE TODO SE VALISA EN INVENTARIO SEGUN F011_CODIGO
  F048_BODEGA_DESTINO NUMERIC(5,0) NULL ,       --  FK BODEGA DESTINO    EN FACTURAS DE VENTAS ES LA BODEGA DEL CLIENTE  EN TRASLADOS ES LA BODEGA A DONDE SE VA A TRASLADAR Y EN ESTE CASO CUANDO SE CA 
                --  A REALIZAR EL INGRESO DEL TRASLADO SE DEBE VALIDAR  ESTA BODEGA DE DESTINO CONTRA LA BODEGA DEL USUARIO QUE ESTA REALIZANDO EL INGRESO DEL TRASLADO
  F039_CODIGO NUMERIC(8,0) NULL,   -- FK  CLIENTE AL QUE SE ENVIA LA FACTURA
  
  F049_FECHA_VENCIMIENTO  DATE NULL,  -- SEGUN FORMA DE PAGO (CONTADO, 30 DIAS, 60 DIAS, 90 DIAS,  120 DIAS)
  
  F051_CODIGO CHAR(1)  NOT NULL  ,--  FK  ESTADO de compra  CHECK  (F048_ESTADO in ('C','E','D','A'))  ,  --'(C  = CREACION  E = ENVIADA   D = DEFINITIVA   A = ANULADA )'
  F007_CODIGO  NUMERIC(5,0)NULL,--  FK  CODIGO DLE PROVEEDOR     0  =>   N/A
  
  --  CORREGIR NOMBRE A   F048_FECHA_TRANSACCION
  F048_TRANSACCION  DATE NOT NULL, --CUANDO EL ALMACENISTA EMPIEZA A REALIZAR LA ORDEN ES LA PRIMERA VEZ EN QUE LA GUARDA
  
  
  F048_RESPONSABLE_ENVIO NUMERIC(6,0)  NULL  ,  -- USUARIO QUE ENVIA LA ORDEN A COMPRAS
  F048_FECHA_ENVIO DATE   NULL  ,
  F048_USUARIO_AUTORIZA NUMERIC(6,0)  NULL  , -- JEFE  QUE AUTORIZA LA COMPRA   O USUARIO QUE REALIZA LA VENTA
  F048_FECHA_AUTORIZACION DATE  NULL    ,        --QUE AUTORIZA LA COMPRA   O USUARIO QUE REALIZA LA VENTA
  
  --F048_SUBTOTAL ANTES DE DESCUENTO ES CALCULADO
  F048_DESCUENTO NUMERIC(14,2)  NOT NULL  ,
  F048_VLR_EXCENTO NUMERIC(14,2)  NOT NULL  , --   LE DESCUEENTA ESTE  PORCENTAJE A  F048_F009_VLR_EXCENTO  ,F048_F0009_VLR_GRAVADO  Y   F048_F009_IVA  ANTES DE ASIGNARLES EL VALOR
  F048_VLR_GRAVADO NUMERIC(14,2)  NOT NULL  ,
  F048_VALOR_IVA NUMERIC(10,2)  NOT NULL  ,
  F048_SUBTOTAL NUMERIC(14,2)  NOT NULL  ,  --  (SUMA   VL_EXCENTO +   VL_GRABADO +)
  F048_PORC_RETEFUENTE NUMERIC(4,2)  NOT NULL  ,
  F048_VALOR_RETEFUENTE NUMERIC(14,2)  NOT NULL  ,
  F048_TOTAL NUMERIC(14,2)  NOT NULL  , 
  F048_NOTAS VARCHAR(80)  NULL ,
 
  -- Documento realcionado
  F048_ID_RELACIONADO NUMERIC(12,0) ,
  F012_TIPO_DOC_RELACIONADO VARCHAR(4)        NULL ,    -- FK   TIPO DE DOCUMENTO REALCIONADO
  F048_CONSECUTIVO_RELACIONADO  NUMERIC(12,0) NULL   ,  --   SECUENCIA POR TIPO DE DOCUMENTO RELACIONADO
  
  -- FACTURA RELACIONADA
  F048_DOC_SOPORTE VARCHAR(15),-- NUMERO REMISION O FACTURA PROVEEDOR   (CAMPO INFORMATIVO)
  F048_CONTADO CHAR(1)  CHECK (F048_CONTADO  IN ('S','N')) ,-- S o N      ESTO SIRVE PAR DETERMINAR LAS VENTAS A CREDITOS DEBO ANALIZAR COMO LO VOY A DESRROLLAR
  
PRIMARY KEY(F048_CODIGO));

     ALTER TABLE T048_DOCUMENTO   ADD CONSTRAINT FK_F011_CODIGO_T048  FOREIGN KEY  (F011_CODIGO)  REFERENCES T011_BODEGA(F011_CODIGO); -- FK COD COMPRA 
     ALTER TABLE T048_DOCUMENTO   ADD CONSTRAINT FK_F048_RESPONSABLE_ENVIO_T048  FOREIGN KEY  (F048_RESPONSABLE_ENVIO)  REFERENCES T013_USUARIO(F013_CODIGO); -- FK COD COMPRA 
     ALTER TABLE T048_DOCUMENTO   ADD CONSTRAINT FK_F048_USUARIO_AUTORIZA_T048  FOREIGN KEY  (F048_USUARIO_AUTORIZA)  REFERENCES T013_USUARIO(F013_CODIGO); -- FK COD USUARIO 
     ALTER TABLE T048_DOCUMENTO   ADD CONSTRAINT FK_F051_CODIGO_T048  FOREIGN KEY  (F051_CODIGO)  REFERENCES T051_ESTADOS_COMPRA(F051_CODIGO); -- FK ESTADO COMPRA 
     ALTER TABLE T048_DOCUMENTO   ADD CONSTRAINT FK_F012_TIPO_DOC_T048  FOREIGN KEY  (F012_TIPO_DOC)  REFERENCES T012_TIPOS_DOCUMENTOS(F012_TIPO_DOC); -- FK ESTADO COMPRA 
     ALTER TABLE T048_DOCUMENTO   ADD CONSTRAINT FK_F007_CODIGO_T048  FOREIGN KEY  (F007_CODIGO)  REFERENCES T007_PROVEEDOR(F007_CODIGO); -- FK ESTADO COMPRA 
     
     ALTER TABLE T048_DOCUMENTO   ADD CONSTRAINT FK_F039_CODIGO_T048  FOREIGN KEY  (F039_CODIGO)  REFERENCES T039_CLIENTE(F039_CODIGO); -- FK  ID DEL CLIENTE
     
     -- ESTE CONSTRAINT NO APLICA MAS BIEN SE VALIDA SEGUN SEA SALIDA O ENTRADA VERIFICAR SEGUN SEA EL CASO
     --ALTER TABLE T048_DOCUMENTO  ADD CONSTRAINT  FK_F048_BOD_DEST_T048  FOREIGN KEY (F048_BODEGA_DESTINO)  REFERENCES  T011_BODEGA (F011_CODIGO);
     
     ALTER TABLE T048_DOCUMENTO  ADD CONSTRAINT  FK_F061_CODIGO_T048  FOREIGN KEY (F061_CODIGO)  REFERENCES   T061_LISTACLIENTES(F061_CODIGO); --FK DEL NUMERO DE LISTA DEL CLIENTE.
     
   
       

    CREATE SEQUENCE  SQ_T048_DOCUMENTO_F048_CODIGO  MINVALUE 1 INCREMENT BY 1 START WITH 1 NOCACHE  ORDER  NOCYCLE ; 
     
     CREATE  INDEX T048_F048_FECHA_AUTORZ_IDX ON T048_DOCUMENTO(F048_FECHA_AUTORIZACION);   -- INDICE UNICO FECHA TRANSACCION EN QUE SE REALIZAR
     --DROP  INDEX  T048_F048_FECHA_AUTORZ_IDX;

     COMMENT ON COLUMN  T048_DOCUMENTO.F051_CODIGO  IS '(C  = CREACION  E = ENVIADA   D = DEFINITIVA   A = ANULADA )';
     
     
   
     
     
     
     -- QUERY DINAMICOS EN POSTGRESS
     
     CREATE OR REPLACE TRIGGER TGR_T048_DOCUMENTO
            BEFORE INSERT ON T048_DOCUMENTO 
            FOR EACH ROW 
             declare EXISTE  numeric(2,0);
             TYPE EmpCurTyp  IS REF CURSOR;
             CUR    EmpCurTyp;
             PF048_CONSECUTIVO  NUMERIC(12,0); 
            BEGIN
               :NEW.F048_TRANSACCION  := SYSDATE;
               
               --AUTO ID F048_CODIGO
               SELECT SQ_T048_DOCUMENTO_F048_CODIGO.NEXTVAL INTO :NEW.F048_CODIGO FROM DUAL;
              
               -- CONSECUTIVO DEL TIPO DE DOCUMENTO          
               SELECT count(*) into EXISTE from all_sequences   WHERE SEQUENCE_NAME    =  'SQ_T012_' || :NEW.F012_TIPO_DOC ; --  VALIDA QUE LA SECUENCIA( TIPÓ DE M) NO EXISTA
               IF EXISTE   >  0 THEN -- si existe la secuencia
               --:NEW.F012_TIPO_DOC ||
                  --OPEN CUR FOR  'SELECT SQ_T012_ORCO.NEXTVAL INTO :PF048_CONSECUTIVO FROM DUAL'  USING PF048_CONSECUTIVO;
                  EXECUTE IMMEDIATE   'SELECT SQ_T012_'||TO_CHAR(:NEW.F012_TIPO_DOC) || '.NEXTVAL  FROM DUAL' INTO  PF048_CONSECUTIVO;
                  :NEW.F048_CONSECUTIVO := PF048_CONSECUTIVO;
                 --OPEN CUR FOR  'SELECT SQ_T012_ORCO.NEXTVAL INTO  :1 FROM DUAL'  USING  :NEW.F048_CONSECUTIVO;
               ELSE
                 RAISE_APPLICATION_ERROR(-20010, 'Error: La secuencia del   tipo de documento no existe.');
               END  IF;
               
            END; 
       /
       
       
        
       
       CREATE OR REPLACE TRIGGER TGR_T048_DOCUMENTO_UPDATE
            BEFORE UPDATE OR INSERT ON T048_DOCUMENTO 
            FOR EACH ROW 
            DECLARE
            PCOD_MOV  VARCHAR(3);
            COD_MOV_ID_RELACIONADO VARCHAR(3);
            EXISTE_IDRELACIONADO NUMERIC(1);
            EXISTE_BOD_DESTINO_CLI   NUMERIC(1);
            EXISTE_LISTA_CLI  NUMERIC(1);
            BEGIN
               IF  :NEW.F051_CODIGO  = 'E' THEN
                 :NEW.F048_FECHA_ENVIO  :=  SYSDATE  ;  
               END IF;
               
               IF  :NEW.F051_CODIGO  = 'D' THEN
                 :NEW.F048_FECHA_AUTORIZACION  :=  SYSDATE;
               END IF;
               
               -- 1 ..  FV   FACTURAS DE VENTA
                    -- TRAIGO EL  CODIGO DEL MOVIMIENTO   'EO','CO'... ETC
                   SELECT  TIPOS_DOCU.F026_CODIGO AS COD_MOV INTO PCOD_MOV FROM  T012_TIPOS_DOCUMENTOS TIPOS_DOCU  
                   WHERE  (TIPOS_DOCU.F012_TIPO_DOC  = :NEW.F012_TIPO_DOC ) ;
                   
                   
                   ---  SI ES UNA FV  EL CODIGO DEL MOVIMIENTO , ENTONCES DEBE TENER DATO EN EL CAMPO BODEGA DESTINO  QUE CORRESPONDE A LA BODEGA DEL CLIENTE
                   
                   IF PCOD_MOV = 'FV'  THEN  -- SI ES  FACTURA DE VENTA  
                       IF (:NEW.F048_BODEGA_DESTINO IS NULL OR  :NEW.F039_CODIGO  IS NULL)  THEN
                         RAISE_APPLICATION_ERROR(-20020,' EL CLIENTE Y SU BODEGA DE DESTINO  SON OBLIGATORIOS');
                       END IF;
                       
                       -- SI ES FV VALIDAR QUE EL CAMPO BODEGA DESTINO SI CORRESPONDA  A UNA BODEGA DEL CLIENTE QUE ESTA EN LA CABESERA DE ESTE DOCUMENTO
                       SELECT  COUNT(*) INTO   EXISTE_BOD_DESTINO_CLI FROM T057_BODEGAS_CLIENTE
                       WHERE     F039_CODIGO  = :NEW.F039_CODIGO AND  F057_CODIGO  =:NEW.F048_BODEGA_DESTINO   ; 
                       
                       IF NOT  (EXISTE_BOD_DESTINO_CLI > 0)   THEN 
                         RAISE_APPLICATION_ERROR(-20007, ' ERROR: LA BODEGA DE DESTINO NO CORRESPONDE A UNA DE LAS BODEGAS DEL CLIENTE ');
                       END IF;
                      
                      --  VALIDA  QUE ESE CLIENTE EN RELIDAD SI TENGA ESE NUMERO DE LISTA
                       SELECT  COUNT(*) INTO   EXISTE_LISTA_CLI FROM T061_LISTACLIENTES
                       WHERE     F039_CODIGO  = :NEW.F039_CODIGO AND  F061_CODIGO  = :NEW.F061_CODIGO; 
                       
                       IF NOT (EXISTE_LISTA_CLI > 0) THEN 
                         RAISE_APPLICATION_ERROR(-20007, ' ERROR: LA LISTA DEL CLIENTE NO ES VALIDA');
                       END IF;
                        
                   END IF;
                   
               
               --- 2 ... FORMULAS MEDICAS
                   
                     /*IF PCOD_MOV = 'FM' THEN  -- SI ES FORMULA MEDICA 
                        --  NO IMPORTA LA  BODEGA DESTINO, PERO SI  IMPORTA EL AFILIADO EL ESM  ADSCRITO DEL AFILIADO  Y EPS DE ES ESM ADSCRITO
                        --=> AFILIADO
                        --=> ESM ADSCRITO(IPS)  GUARDARLO PUES DESPUES PUEDE CAMBIAR
                        --=> EPS DEL ESM ADSCRITO(F039_CODIGO O CODIGO DEL CLIENTE CREAR UNA TABLA DE  SU IPS(ESM ADCRITO))
                        
                            --- UNA EPS TIENE VARIOS IPS Y ESTOS TIENEN AFILIADOS LOS CUALES TIENE UN  ESM ADSCRITOS POR DEFAULT 
                      END IF;*/
                     
                 
              -- 3  ..  ENTRADAS CON ORDEN DE COMPRA
                
                    IF PCOD_MOV = 'EO'  THEN --EO	ENTRADAS CON ORDEN COMPRA   ...LA BODAGA DESTINO ES NULA
                         IF  :NEW.F007_CODIGO  IS NULL THEN
                              RAISE_APPLICATION_ERROR(-20020,'Error: EL PROVEEDOR NO FUE SUMINISTRADO' );                            
                         END IF; 
                         
                          IF  :NEW.F011_CODIGO  IS NULL THEN
                              RAISE_APPLICATION_ERROR(-20020,'Error: LA BODEGA PARA INGRESO NO FUE SUMINISTRADA' );                            
                         END IF; 
                         
                                    
                          IF :NEW.F048_ID_RELACIONADO IS NULL  THEN
                           RAISE_APPLICATION_ERROR(-20020,'Error: LA ENTRADA CON ORDEN  NO TIENE ID RELACIONADO' );   -- ES EL IDE DE LA ORDEN DE COMPRA  
                          END IF;
                     
                       IF  INSERTING  THEN 
                           SELECT COUNT(*) INTO  EXISTE_IDRELACIONADO   FROM  T048_DOCUMENTO DOC
                           WHERE F048_CODIGO  = :NEW.F048_ID_RELACIONADO;
                           
                           IF NOT (EXISTE_IDRELACIONADO > 0) THEN
                             RAISE_APPLICATION_ERROR(-20020,'Error: EL ID DEL DOCUMENTO REALCIONADO NO EXISTE' );                                                                          
                           END IF;
                           
                               
                                   -- RESTRINGE QUE SOLO DE PUEDE REALIZAR UN INGRESO SI EL TIPO DE MOVIMIENTO DEL ID_RELACIONADO ES 'CO'(ORDEN DE COMPRA)
                           SELECT TIPOS_DOCU.F026_CODIGO INTO  COD_MOV_ID_RELACIONADO FROM  T048_DOCUMENTO DOC
                           INNER JOIN  T012_TIPOS_DOCUMENTOS TIPOS_DOCU  ON (TIPOS_DOCU.F012_TIPO_DOC  =  DOC.F012_TIPO_DOC  )
                           WHERE  DOC.F048_CODIGO  =:NEW.F048_ID_RELACIONADO;   -- AND TIPOS_DOCU.F026_CODIGO    ='CO';
                           
                           IF NOT (COD_MOV_ID_RELACIONADO = 'CO') THEN
                             RAISE_APPLICATION_ERROR(-20020,'Error: EL CODIGO DE MOVIMIENTO DEL DOCUMENTO REALCIONADO DEBE SER  "CO" ORDEN DE COMPRA ' );                                                                          
                           END IF;
                       END IF;   
                       
                       IF UPDATING THEN
                         IF (:OLD.F048_ID_RELACIONADO  <>  :NEW.F048_ID_RELACIONADO) OR ((:OLD.F012_TIPO_DOC_RELACIONADO  <>  :NEW.F012_TIPO_DOC_RELACIONADO)) OR (:OLD.F048_CONSECUTIVO_RELACIONADO  <>  :NEW.F048_CONSECUTIVO_RELACIONADO) THEN 
                           RAISE_APPLICATION_ERROR(-20000, 'ERROR: LA ORDEN DE COMPRA RELACIONADA  NO SE PUEDE EDITAR.');
                         END  IF;
                       END IF;
                           
                   
                  END IF; -- PCOD_MOV = 'EO'  EO	ENTRADAS CON ORDEN COMPRA
           
           --  4..     TR   ENTRADA CON TRASLADO     PENDIENTE DE DESARROLLAR
               
            END; 
       /

  
            CREATE OR REPLACE TRIGGER TGR_T048_DOCUMEN_UPDAT_BLOQU
            BEFORE UPDATE ON T048_DOCUMENTO 
            FOR EACH ROW 
            --DECLARE TIPO_MOVI_DOCU  CHAR(3);    --  E = ENTRADA  S = SALIDA   N/A   =  NO APLICA
            BEGIN
            IF :OLD.F051_CODIGO = 'D'   THEN 
               RAISE_APPLICATION_ERROR(-20000, 'ERROR: LOS DOCUMENTOS EN ESTADO DEFINITIVO, NO SE PUEDEN EDITAR.');
            END IF;
            END; 

/
     
 
CREATE TABLE T049_DET_DOCUMENTO (
    F049_CODIGO NUMERIC(15,0)  NOT NULL  , --PK  AUTO
    F048_CODIGO NUMERIC(12,0)  NOT NULL  ,   --FK COD  DOCUMENTO 
    F051_CODIGO CHAR(1) NOT NULL,    -- FK ESTADO DEL DOCUMENTO --  ITEM
    F004_CODIGO VARCHAR(10)  NOT NULL  ,  --  FK PRODUCTO
    F052_CODIGO  VARCHAR(3)  NOT NULL,   -- FK MODOCOMPRA / VENTA    CHECK  (F049_MODOCOMPRA  in ('UND','EPR','EPS')),  -- venta in ('UND','EPR','EPS,BLT'))
    
    F049_ITEM NUMERIC(4,0)   NULL  ,   -- CONSECUTIVO  ITEM DEL DOCUMENTO
    F049_ITEM_RELACIONADO NUMERIC(4,0) NULL, -- EN NOTAS CONTIENE EL ID DEL ITEM(F049_ITEM) DE LA FACTURA
   --F049_ROTACION_MENSUAL NUMERIC(12,0) NOT NULL  ,
    F049_CANTIDAD_MODO_COMP_VENTA NUMERIC(12,2)  NULL, --  ES LA CANTIDAD YA SEA DE EMPAQUES PRIMARIOS SECUNDARIOS O UNIDADES QUE SE COMPRAN,VENDEN O ME PIDEN  SEGUN EL MODO F052_CODIGO
    F049_CANTIDAD_SOLICITADA NUMERIC(12,2)  NULL  ,  -- PARA FACTURA DE VENTA ES NULO
    F049_CANTIDAD_AUTORIZADA NUMERIC(12,2)   NULL  ,  -- ES LA CANTIDAD YA SEA DE EMPAQUES PRIMARIOS SECUNDARIOS O UNIDADES  QUE SE AUTORIZAN 
    
    F049_CANTIRECIBIDA_MODO_CPVENT NUMERIC(12,2),
    
    F049_CANTIDAD_TOTAL_INVENTARIO NUMERIC(15,2)  NOT NULL ,  --(TOTAL UNIDADES MINIMAS QUE SE COMPRAN O SE VENDEN) SE INGRESA A LA MINIMA UNIDAD ES EL TOTAL DE UNIDADES CONTENIDAS EN EMPAQUE PRIMARIO Y SECUNDARIO *****   PARA VENTA ES EL TOTAL DE UNIDAD MINAMA VENDIDAS CALMCULANDO EL TOTAL DE  MODO F052 COMPRAVENTA
    F049_CANTIDAD_PTE_TOTAL_INVENT NUMERIC(12,2)  NULL,  -- (APLICA PARA COMAPRAS) NO IMPORTA EL MODO DE VENTA SINO EL TOTAL DE UNIDADES ASI COMO SE INGRESAN A ALMACEN
    
   F049_MANEJA_INVENTARIO   CHAR(1) CHECK  (F049_MANEJA_INVENTARIO IN  ('S','N'))  NOT NULL, 
    
    -- INGRESO  ALMACEN
    F049_LOTE_SERIAL VARCHAR(10) NULL , 
    F049_FECHA_VENCIMIENTO_PROD  DATE NULL,   -- FEHCA DE VENCIMIETO DEL PRODUCTO 
    F049_FECHA_FABRICACION DATE NULL,
  
    
    -- PENDIENTE CONDICION DE PAGO
    
    -- VENTA
   -- F049_PRECIO_UNIT_MODO_VENTA NUMERIC (14,2),  -- SE TRAE EL PRECIO  SEGUN EL MODO DE VENTA(CON LOS 3 DECIMALES ) PUBLICO O DE LA LISTA SE REDONDEA Y   SE GUARDAN 2 DECIMALES ...  CALCULO(EN VENTA SEGUN MODO VENTA : UND (SE ASIGNA PRECIO X UNIDAD)   -   BLISTER(SE DIVIDE    PRECIO DEL BLISTER/EL TOTAL UND DEL BLISTER )   ---  EMPAQUE PRIM Y SEC( SE DIVIDE ASI :   CANTIDAD TOTAL DE UNIDADES DEL EMPAQUE   /  PRECIO_EMP_PRIMARIO ) ) .... **************       (  PARA COMPRAS SIEMPRE SE INGRESA EL PRECIO POR UNIDAD DIVIDIENDO =>    TOTAL ITEM   / EL TOTAL DE UNIDADES  )                            LO TRAE DE LA LISTA DE PRECIOS DEL PROVEEDOR
    
    F049_COSTO_ULTIMO NUMERIC(14,2),  -- CAPTURAR EL COSTO ULTIMO EN EL MOMENTO DE RALIZAR LA SALIDA DE INVENTARIO 
    F006_COSTO_PROMEDIO NUMERIC(14,2),  --COSTO PROMEDIO PONDERADO EN EL MOMENTO DEL MOVIMIENTO EN QUE SE CREA EL DOCUMENTO
    
    -- COSTO PROVEEDOR UNIT SIN IVA 
    F049_COSTO_UNIT_MODO_COMPRA NUMERIC(18,2)  NULL  ,  -- AQUI EL COSTO UNITARIO SIN IVA (PROVEEDOR) A 3 DECIMALES SEGUN EL MODO DE COMPRA (UND,EPR,EPS) SE REDONEA Y SE GUARDA
    F049_DESCUENTO NUMERIC(12,2) NOT   NULL  ,
    F049_PRECIO_UNIT_REDON NUMERIC(12,2)   NULL  ,  --  PRECIO UNITARIO DE VENTA REDONDEADO SEGUN EL MODO DE VENTA (UND,EPR,EPS,BLT)(EL PRECIO DE VENTA SE SACA AL SUMARLE EL VALOR DEL IVA)
    F049_PORC_IVA NUMERIC(4,2)  NOT NULL   ,
    F049_IVA_UNIT NUMERIC(10,2) NOT  NULL  ,  -- VALOR DEL IVA UNITARIO REDONDEADO (EL PRECIO DE VENTA SE SACA AL SUMARLE EL VALOR DEL F049_PRECIO_UNIT_REDON)
    F049_BASE_EXCENTA_ITEM NUMERIC(14,2) NOT  NULL  ,
    F049_BASE_GRAVADA_ITEM NUMERIC(14,2)NOT  NULL  ,
    F049_SUBTOTAL_ITEM NUMERIC(12,2) NOT  NULL  ,  -- TOTAL DEL ITEM DESPUES DE IMPUESTOS  Y ANTES DE DESCUeNTO
    F049_VALOR_IVA_ITEM NUMERIC(12,2)NOT  NULL  ,
    F049_VALOR_NETO_ITEM NUMERIC(14,2) NOT NULL  ,

  PRIMARY KEY(F049_CODIGO));
 
  ALTER TABLE T049_DET_DOCUMENTO   ADD CONSTRAINT FK_F048_CODIGO_T049  FOREIGN KEY  (F048_CODIGO)  REFERENCES T048_DOCUMENTO(F048_CODIGO); -- FK COD COMPRA 
  ALTER TABLE T049_DET_DOCUMENTO   ADD CONSTRAINT FK_F004_CODIGO_T049  FOREIGN KEY  (F004_CODIGO)  REFERENCES T004_PRODUCTO(F004_CODIGO); -- FK COD PRODUCTO
  
  ALTER TABLE T049_DET_DOCUMENTO   ADD CONSTRAINT FK_F052_CODIGO_T049  FOREIGN KEY  (F052_CODIGO)  REFERENCES T052_MODOS_COMPRA_VENTA(F052_CODIGO); --   UND  , BILTER , EMP PRIMARIO, EMP SECUNDARIO
  
  ALTER TABLE T049_DET_DOCUMENTO   ADD CONSTRAINT FK_F051_CODIGO_T049  FOREIGN KEY  (F051_CODIGO)  REFERENCES T051_ESTADOS_COMPRA(F051_CODIGO); --   UND  , BILTER , EMP PRIMARIO, EMP SECUNDARIO
 
  --ALTER TABLE T049_DET_DOCUMENTO  ADD CONSTRAINT UQ_T049_ITEM_UNICO UNIQUE (F048_CODIGO,F049_ITEM); 

  COMMENT ON COLUMN  T049_DET_DOCUMENTO.F052_CODIGO  IS 'FK MODOCOMPRA / VENTA    CHECK  (F049_MODOCOMPRA  in (UND,EPR,EPS)),  -- venta in (UND,EPR,EPS,BLT)';
  COMMENT ON COLUMN  T049_DET_DOCUMENTO.F049_ITEM_RELACIONADO  IS  'EN NOTAS CONTIENE EL ID DEL ITEM(F049_ITEM) DE LA FACTURA';
   --  AQUI SE AVTUALIZA EL STOCK      
       CREATE OR REPLACE TRIGGER TGR_T049_DET_DOCUMENTO_BEFOINS
            BEFORE INSERT ON T049_DET_DOCUMENTO 
            FOR EACH ROW 
            BEGIN
          --  ID  F049_CODIGO   AUTO GEN
               SELECT SQ_T049_DET_DOCUMT_F049_CODIGO.NEXTVAL INTO :NEW.F049_CODIGO FROM DUAL;
              -- SELECT (max (F049_ITEM) +1)  INTO :NEW.F049_ITEM FROM T049_DET_COMPRA  WHERE F048_CODIGO   = :NEW.F048_CODIGO ;
           END  ;  
       /

       /************  AUTO IN  F049_CODIGO ************/
        CREATE SEQUENCE  SQ_T049_DET_DOCUMT_F049_CODIGO MINVALUE 1 INCREMENT BY 1 START WITH 1 NOCACHE  ORDER  NOCYCLE ; 
      
      
      
            
       --  AQUI SE ACTUALIZA EL STOCK      
       CREATE OR REPLACE TRIGGER TGR_T049_DET_DOCUMENTO
            BEFORE INSERT OR UPDATE ON T049_DET_DOCUMENTO 
            FOR EACH ROW 
            DECLARE TIPO CHAR(1);
                    REQUIERE_LOTE CHAR(1);
                    REQUIERE_UBICACION  CHAR(1);
                    BODEGA NUMERIC(6,0);
                    TIPO_MOVI_DOC  CHAR(3);    --  E = ENTRADA  S = SALIDA   N/A   =  NO APLICA
                    PESTADO_DOC  CHAR(1);
                    DESCRIPCION_PROD  VARCHAR(300);
                    
                    EXISTEPROD_T047_STOCK_LOTE NUMERIC(2,0);  --(CON LOTE) EXISTE STOCK DEL PRODUCTO POR   LOTE
                    EXISTEPROD_T047_STOCK CHAR(1);  --(SIN LOTE) EXISTE STOCK DEL PRODUCTO SIN    LOTE
                    
                    EXISTENCIAS_INVENT  NUMERIC(15,2);
                    
                    COD_MOV  VARCHAR(3); --- DEL DOCUMENTO QUE SE ESTA PROCEANDO NO DEL RELACIONADO
                    PF048_ID_RELACIONADO NUMERIC(12,0);
                 
            BEGIN
            
              IF  :NEW.F049_CANTIDAD_TOTAL_INVENTARIO < 0 THEN 
                  RAISE_APPLICATION_ERROR(-20000, 'LA CANTIDAD_TOTAL_INVENTARIO NO PUEDE SER NEGATIVA' );
              END IF;
              
                  
                     -- trae el tipo de producto , si requiere lote y   ubicacion
                     select F004_DESCRIPCION ,F004_TIPO,F004_REQUIERE_LOTE,F004_REQUIERE_UBICACION INTO DESCRIPCION_PROD,TIPO, REQUIERE_LOTE, REQUIERE_UBICACION  from T004_PRODUCTO   PRO
                     WHERE PRO.F004_CODIGO = :NEW.F004_CODIGO   ;
                   
                     
                       --   BODEGA(DOC)  Y  TIPO DE MOVIMIENTO DEL DOCUMENTO => E = ENTRADA  S = SALIDA   N/A   =  NO APLICA
                       SELECT DOC.F011_CODIGO, TIPOS_MOV.F026_TIPO_MOV AS TIPO_MOV_DOC,DOC.F051_CODIGO AS ESTADO_DOC, TIPOS_DOCU.F026_CODIGO,DOC.F048_ID_RELACIONADO INTO BODEGA,TIPO_MOVI_DOC, PESTADO_DOC, COD_MOV,PF048_ID_RELACIONADO   FROM  T048_DOCUMENTO DOC
                       INNER JOIN  T012_TIPOS_DOCUMENTOS TIPOS_DOCU  ON (TIPOS_DOCU.F012_TIPO_DOC  =  DOC.F012_TIPO_DOC  )
                       INNER JOIN  T026_TIPOS_MOVIMIENTO  TIPOS_MOV  ON (TIPOS_MOV.F026_CODIGO   = TIPOS_DOCU.F026_CODIGO )
                       WHERE  F048_CODIGO  = :NEW.F048_CODIGO;
                       
                    
                       
                      --RAISE_APPLICATION_ERROR(-20020,'777777777777777777777777777777777777777')     ;
                      
                                        
                     -- IF  (TIPO_MOVI_DOC  IN ('E','S') )   then   -- EL DOCUMENTO ES DE ENTADA O SALIDA 
                          
                         --IF TIPO  <> 'I'  THEN      SE QUITA ESTO PARA PERMITIR QUE EN UNA FACTURA DE VENTA SE PUEDAN INGRESAR ITEM QUE SON DE SERVICIOS 
                           -- RAISE_APPLICATION_ERROR(-20020,'ERROR: EL PRODUCTO ' + DESCRIPCION_PROD+'  NO ESTA MARCADO COMO DE INVENTARIO, PERO EL DOCUMENTO SI AFECTA INVENTARIO');
                            
                            
                          --ELSE  --  SERVICIOS    EL DOCUMENTO ES DE SERVICIOS
                           
                     --END IF;
                   
                   -- - EL DOCUMENTO ES DE SERVICIO 
                    IF  COD_MOV  = 'FS'  then   -- EL DOCUMENTO ES FACTURA DE SERVICIO 
                       IF TIPO  = 'I'  THEN   -- PRODUCTO AFECTA IVENTARIO
                               RAISE_APPLICATION_ERROR(-20020,'   ERROR: EL PRODUCTO ' || DESCRIPCION_PROD ||'  ESTA MARCADO COMO DE INVENTARIO, PERO EL DOCUMENTO ES DE SERVICIO');
                       END IF;
                    END IF;
                     
                     
                         -- SI ES SALIDA ITEM ESTADO IN (C,E) Y  VALIDAR STOCK   
                         
                           IF TIPO_MOVI_DOC   = 'S'  AND PESTADO_DOC IN ('C','E')  then  --  SALIDA DE ALMACEN   
                             
                              
                                       -- SI REQUIERE LOTE SI YA EXISTE SINO INSERTELO
                                              IF REQUIERE_LOTE   = 'S'  THEN
                                                   
                                                   -- EXISTE PRODUCTO Y LOTE EN LA TABLA DE STOCK  PARA LA BODEGA DE ESTE DOCUMENTO
                                                      select COUNT(*)  INTO EXISTEPROD_T047_STOCK_LOTE from T047_STOCK_LOTES   STOCK
                                                      WHERE STOCK.F004_CODIGO = :NEW.F004_CODIGO AND STOCK.F011_CODIGO  = BODEGA  AND    STOCK.F047_LOTE  = :NEW.F049_LOTE_SERIAL  ;
                                                      
                                                          IF  EXISTEPROD_T047_STOCK_LOTE > 1 THEN 
                                                              RAISE_APPLICATION_ERROR(-20020,'ERROR: EL  PRODUCTO ' || DESCRIPCION_PROD || 'ESTA CREADO MAS DE UNA VEZ CON EL MISMO LOTE PARA ESTA BODEGA EN LA TABLA  T047_STOCK_LOTES ' );  
                                                          END IF;    
                                                      
                                                       -- VLIDAR  CANTIDADES EN INVENTARIO
                                                       select   STOCK.F047_EXISTENCIAS INTO  EXISTENCIAS_INVENT from T047_STOCK_LOTES   STOCK
                                                      WHERE STOCK.F004_CODIGO = :NEW.F004_CODIGO and STOCK.F011_CODIGO  = BODEGA AND  STOCK.F047_LOTE  = :NEW.F049_LOTE_SERIAL  ;
                                                  
                                                     IF EXISTEPROD_T047_STOCK_LOTE  > 0 THEN   -- SI EXISTE EL LOTE - PRODUCTO EN LA BODEGA DE INGRESO
                                                        
                                                         IF  EXISTENCIAS_INVENT < :NEW.F049_CANTIDAD_TOTAL_INVENTARIO THEN 
                                                           RAISE_APPLICATION_ERROR(-20018,'LA CANTIDAD TOTAL EN INVENTARIO DEL PRODUCTO ' || DESCRIPCION_PROD || ' ES:' ||TO_CHAR(EXISTENCIAS_INVENT) || ', INDIQUE UNA CANTIDAD MENOR PARA DAR SALIDA' ); 
                                                         END IF;
                                                       
                                                     ELSE  --  SINO EXISTE EL LOTE INSERTE EL NUEVO LOTE CON SUS CANTIDADES
                                                      RAISE_APPLICATION_ERROR(-20019,'EL LOTE DEL PRODUCTO ' || DESCRIPCION_PROD || ' NO ÉXISTE , INDIQUE UN LOTE CORRECTO -  O EL PRODUCTO NO SE LE HA HECHO NINGUN INGRESO' );  
                                                      END IF;
                                                      
                                              ELSE --F004_REQUIERE_LOTE   = 'N'     NO REQUIERE LOTE
                                                 
                                                  IF NOT (:NEW.F049_LOTE_SERIAL IS NULL)  THEN 
                                                    RAISE_APPLICATION_ERROR(-20020,'ERROR: EL PRODUCTO '  || DESCRIPCION_PROD || ' NO REQUIRE LOTE' );
                                                  END IF;
                                                     
                                                  -- EXISTENCIAS EN INVENTARIO DE UN PRODUCTO
                                                      select COUNT(*)  INTO EXISTEPROD_T047_STOCK from T047_STOCK_LOTES   STOCK
                                                      WHERE  STOCK.F011_CODIGO  = BODEGA  AND  STOCK.F004_CODIGO = :NEW.F004_CODIGO AND STOCK.F047_LOTE  IS NULL  ;
                                                      
                                                           IF  EXISTEPROD_T047_STOCK > 1 THEN  
                                                              RAISE_APPLICATION_ERROR(-20020,'ERROR: EL  PRODUCTO ' || DESCRIPCION_PROD || 'ESTA CREADO MAS DE UNA VEZ  PARA ESTA BODEGA EN LA TABLA  T047_STOCK_LOTES ');  
                                                           END IF;   
                                                    
 
                                                     IF EXISTEPROD_T047_STOCK > 0 THEN -- EXISTE PRODUCTO EN TBL STOCK
                                                     
                                                        -- EXISTENCIAS EN INVENTARIO DE UN PRODUCTO
                                                        select  STOCK.F047_EXISTENCIAS   INTO  EXISTENCIAS_INVENT from T047_STOCK_LOTES   STOCK
                                                        WHERE  STOCK.F011_CODIGO  = BODEGA  AND  STOCK.F004_CODIGO = :NEW.F004_CODIGO AND STOCK.F047_LOTE  IS NULL   ;    
                                                        
                                                         IF  EXISTENCIAS_INVENT < :NEW.F049_CANTIDAD_TOTAL_INVENTARIO THEN 
                                                           RAISE_APPLICATION_ERROR(-20018,'|LA CANTIDAD TOTAL EN INVENTARIO DEL PRODUCTO ' || DESCRIPCION_PROD || ' ES:' || TO_CHAR(EXISTENCIAS_INVENT) || ',INDIQUE UNA CANTIDAD MENOR PARA DAR SALIDA|'); 
                                                         END IF;
                                                        
                                                    ELSE -- SI NO EXISTEEN TBL STOCK
                                                       RAISE_APPLICATION_ERROR(-20019,'|EL PRODUCTO ' || DESCRIPCION_PROD || ' NO TIENE CANTIDADES EN INVENTARIO EN LA BODEGA|' );   
                                                    END  IF;
                                              END IF;-- F004_REQUIERE_LOTE   = 'S'
                                     END IF  ; --TIPO_MOVI_DOC   = 'S'  AND PESTADO_DOC IN ('C','E')  then  --  SALIDA DE ALMACEN        
                                --------------  END VALIDAR STOCK  ESTADO (C,E)                                               
                       
                     
                           
                  
                --------------------------- PRODUCTO MOVIMIENTO DE INVENTARIO AND  DOCUMENTO AFECTA INVENTARIO  Y ESTADO DEFINITIVO ---------------------------
                
                   if (TIPO  = 'I')  AND (TIPO_MOVI_DOC  IN ('E','S'))  AND PESTADO_DOC  = 'D' then   --  I  =>  producto MOVIMIENTO  inventario   Y EL DOCUMENTO AFECTA INVENTARIO
                           
                           IF :OLD.F051_CODIGO = 'D' THEN 
                              RAISE_APPLICATION_ERROR(-20017, 'ERROR: EL ITEM YA FUE PROCESADO POR LO QUE  NO SE PUEDE EDITAR' );
                           END IF;
                           
                                
                            IF REQUIERE_LOTE   = 'S'   AND ((:NEW.F049_LOTE_SERIAL IS NULL  OR NVL(:NEW.F049_LOTE_SERIAL,' ')   = ' ') OR (:NEW.F049_FECHA_VENCIMIENTO_PROD IS NULL OR NVL(:NEW.F049_FECHA_VENCIMIENTO_PROD,'')  = ''))THEN 
                               RAISE_APPLICATION_ERROR(-20017, 'EL PRODUCTO CODIGO => ' ||TO_CHAR(:NEW.F004_CODIGO)  || ' NOMBRE => '|| DESCRIPCION_PROD || ' REQUIERE CODIGO LOTE / SERIAL  Y FECHA DE VENCIMIENTO' );
                            END IF;
                            
                          
                       --RAISE_APPLICATION_ERROR(-20017, PESTADO_DOC);
                       
                       
                       
                       --  AFECTACION DE INVENTARIO
                      IF PESTADO_DOC    = 'D'  THEN   -- SOLO LOS DOCUMENTOS EN ESTADO DEFINITIVO ACTUALIZAN SALIDAS A INVENTARIO
                           -- SALIDA DE ALMACEN
                           
                           IF (TIPO_MOVI_DOC   = 'E'    OR  TIPO_MOVI_DOC   = 'S')  THEN
                             IF  ( (NVL(:NEW.F049_CANTIDAD_AUTORIZADA,-1) <= 0) OR (NVL(:NEW.F049_CANTIDAD_TOTAL_INVENTARIO,-1) <= 0))THEN
                                    RAISE_APPLICATION_ERROR(-20020,'|ERROR: LA CANTIDAD AUTORIZADA Y LA  CANTIDAD  TOTAL INVENTARIO SON OBLIGATORIAS. => TGR_T049_DET_DOCUMENTO|' );  
                             END IF;
                           END IF;
                           
                           IF TIPO_MOVI_DOC   = 'S'  then  --  SALIDA DE ALMACEN   
                             
                              
                                       -- SI REQUIERE LOTE SI YA EXISTE SINO INSERTELO
                                              IF REQUIERE_LOTE   = 'S'  THEN
                                                   
                                                   -- EXISTE PRODUCTO Y LOTE EN LA TABLA DE STOCK  PARA LA BODEGA DE ESTE DOCUMENTO
                                                      select COUNT(*)  INTO EXISTEPROD_T047_STOCK_LOTE from T047_STOCK_LOTES   STOCK
                                                      WHERE STOCK.F004_CODIGO = :NEW.F004_CODIGO AND STOCK.F011_CODIGO  = BODEGA  AND    STOCK.F047_LOTE  = :NEW.F049_LOTE_SERIAL  ;
                                                      
                                                          IF  EXISTEPROD_T047_STOCK_LOTE > 1 THEN 
                                                              RAISE_APPLICATION_ERROR(-20020,'ERROR: EL  PRODUCTO ' || DESCRIPCION_PROD || 'ESTA CREADO MAS DE UNA VEZ CON EL MISMO LOTE PARA ESTA BODEGA EN LA TABLA  T047_STOCK_LOTES ' );  
                                                          END IF;    
                                                      
                                                      
                                                       select   STOCK.F047_EXISTENCIAS INTO  EXISTENCIAS_INVENT from T047_STOCK_LOTES   STOCK
                                                      WHERE STOCK.F004_CODIGO = :NEW.F004_CODIGO and STOCK.F011_CODIGO  = BODEGA AND  STOCK.F047_LOTE  = :NEW.F049_LOTE_SERIAL  ;
                                                  
                                                     IF EXISTEPROD_T047_STOCK_LOTE  > 0 THEN   -- SI EXISTE EL LOTE - PRODUCTO EN LA BODEGA DE INGRESO
                                                        
                                                         IF  EXISTENCIAS_INVENT < :NEW.F049_CANTIDAD_TOTAL_INVENTARIO THEN 
                                                           RAISE_APPLICATION_ERROR(-20018,'LA CANTIDAD TOTAL EN INVENTARIO DEL PRODUCTO ' || DESCRIPCION_PROD || ' ES:' ||TO_CHAR(EXISTENCIAS_INVENT) || ',INDIQUE UNA CANTIDAD MENOR PARA DAR SALIDA' ); 
                                                         END IF;
                                                           -- ACTUALICE LAS CANTIDADES DEL LOTE 
                                                         UPDATE  T047_STOCK_LOTES  STOCK  SET  F047_EXISTENCIAS = (F047_EXISTENCIAS - :NEW.F049_CANTIDAD_TOTAL_INVENTARIO) 
                                                         WHERE STOCK.F004_CODIGO = :NEW.F004_CODIGO and STOCK.F011_CODIGO  = BODEGA  AND  STOCK.F047_LOTE  = :NEW.F049_LOTE_SERIAL ;
                                                     
                                                     ELSE  --  SINO EXISTE EL LOTE INSERTE EL NUEVO LOTE CON SUS CANTIDADES
                                                      RAISE_APPLICATION_ERROR(-20019,'EL LOTE DEL PRODUCTO ' || DESCRIPCION_PROD || ' NO ÉXISTE , INDIQUE UN LOTE CORRECTO -  O EL PRODUCTO NO SE LE HA HECHO NINGUN INGRESO' );  
                                                      END IF;
                                                      
                                              ELSE --F004_REQUIERE_LOTE   = 'N'     NO REQUIERE LOTE
                                                 
                                                  IF NOT (:NEW.F049_LOTE_SERIAL IS NULL)  THEN 
                                                    RAISE_APPLICATION_ERROR(-20020,'ERROR: EL PRODUCTO '  || DESCRIPCION_PROD || ' NO REQUIRE LOTE' );
                                                  END IF;
                                                     
                                                  -- EXISTE EN LA TABLA DE STOCK EL PRODUCTO  
                                                      select COUNT(*)  INTO EXISTEPROD_T047_STOCK from T047_STOCK_LOTES   STOCK
                                                      WHERE  STOCK.F011_CODIGO  = BODEGA  AND  STOCK.F004_CODIGO = :NEW.F004_CODIGO AND STOCK.F047_LOTE  IS NULL  ;
                                                      
                                                           IF  EXISTEPROD_T047_STOCK > 1 THEN  
                                                              RAISE_APPLICATION_ERROR(-20020,'ERROR: EL  PRODUCTO ' || DESCRIPCION_PROD || 'ESTA CREADO MAS DE UNA VEZ  PARA ESTA BODEGA EN LA TABLA  T047_STOCK_LOTES ');  
                                                           END IF;   
                                                    
 
                                                     IF EXISTEPROD_T047_STOCK > 0 THEN -- EXISTE PRODUCTO EN TBL STOCK
                                                     
                                                        -- EXISTENCIAS EN INVENTARIO DE UN PRODUCTO
                                                        select  STOCK.F047_EXISTENCIAS   INTO  EXISTENCIAS_INVENT from T047_STOCK_LOTES   STOCK
                                                        WHERE  STOCK.F011_CODIGO  = BODEGA  AND  STOCK.F004_CODIGO = :NEW.F004_CODIGO AND STOCK.F047_LOTE  IS NULL   ;    
                                                        
                                                         IF  EXISTENCIAS_INVENT < :NEW.F049_CANTIDAD_TOTAL_INVENTARIO THEN 
                                                           RAISE_APPLICATION_ERROR(-20018,'|LA CANTIDAD TOTAL EN INVENTARIO DEL PRODUCTO ' || DESCRIPCION_PROD || ' ES:' || TO_CHAR(EXISTENCIAS_INVENT) || ',INDIQUE UNA CANTIDAD MENOR PARA DAR SALIDA|'); 
                                                         END IF;
                                                        
                                                          -- ACTUALICE LAS CANTIDADES SIN LOTE
                                                         UPDATE  T047_STOCK_LOTES  STOCK  SET  F047_EXISTENCIAS = (F047_EXISTENCIAS - :NEW.F049_CANTIDAD_TOTAL_INVENTARIO) 
                                                         WHERE STOCK.F004_CODIGO = :NEW.F004_CODIGO and STOCK.F011_CODIGO  = BODEGA AND STOCK.F047_LOTE  IS NULL;
                                                                                               
                                                    ELSE -- SI NO EXISTEEN TBL STOCK
                                                       RAISE_APPLICATION_ERROR(-20019,'|EL PRODUCTO ' || DESCRIPCION_PROD || ' NO TIENE CANTIDADES EN INVENTARIO EN LA BODEGA|' );   
                                                    END  IF;
                                                
                                                
                                               
                                              END IF;-- F004_REQUIERE_LOTE   = 'S'
                             
                               
                            
                           ELSE  -- TIPO_MOVI_DOC   <>  'S' DIFERENTE DE SALIDA
                                 
                                   ---  ENTRADA  ALMACEN 
                                IF TIPO_MOVI_DOC   = 'E'  then  -- TIPO DE MOVIMIENTO DEL DOCUMENTO ES ENTRADA     --  E = ENTRADA  S = SALIDA   N/A   =  NO APLICA(COTIZACIONES)
                             
                                       -- SI REQUIERE LOTE SI YA EXISTE SINO INSERTELO
                                              IF REQUIERE_LOTE   = 'S'  THEN
                                                   
                                                   -- EXISTE PRODUCTO Y LOTE EN LA TABLA DE STOCK  PARA LA BODEGA DE ESTE DOCUMENTO
                                                      select COUNT(*) INTO EXISTEPROD_T047_STOCK_LOTE from T047_STOCK_LOTES   STOCK
                                                      WHERE STOCK.F004_CODIGO = :NEW.F004_CODIGO and STOCK.F011_CODIGO  = BODEGA AND  STOCK.F047_LOTE  = :NEW.F049_LOTE_SERIAL  ;
                                                      
                                                       IF  EXISTEPROD_T047_STOCK_LOTE > 1 THEN 
                                                         RAISE_APPLICATION_ERROR(-20020,'ERROR: EL  PRODUCTO ' || DESCRIPCION_PROD || 'ESTA CREADO MAS DE UNA VEZ CON EL MISMO LOTE PARA ESTA BODEGA EN LA TABLA  T047_STOCK_LOTES ' );  
                                                       END IF;  
                                                      
                                                      
                                                  
                                                     IF EXISTEPROD_T047_STOCK_LOTE  > 0 THEN   -- SI EXISTE EL LOTE
                                                                                                            
                                                          -- ACTUALICE STOCK DE LAS CANTIDADES DEL LOTE
                                                         UPDATE  T047_STOCK_LOTES  STOCK  SET  F047_EXISTENCIAS = (F047_EXISTENCIAS + :NEW.F049_CANTIDAD_TOTAL_INVENTARIO) 
                                                         WHERE STOCK.F004_CODIGO = :NEW.F004_CODIGO and STOCK.F011_CODIGO  = BODEGA  AND  STOCK.F047_LOTE  = :NEW.F049_LOTE_SERIAL ;
                                                         
                                                         --IF ES UNA ORDEN DE COMPRA DESCUENTE LAS CANTIDADES INGRESADAS
                                                         
                                 
                                                     ELSE  --  SINO EXISTE EL LOTE INSERTE EL NUEVO LOTE CON SUS CANTIDADES
                                                       RAISE_APPLICATION_ERROR(-20019,'EL LOTE DEL PRODUCTO ' || DESCRIPCION_PROD || ' NO ÉXISTE , INDIQUE UN LOTE CORRECTO O CREELO' );  
                                                                   /*INSERT INTO   
                                                                      --F047_CODIGO 
                                                                     (F011_CODIGO ,
                                                                      F004_CODIGO ,
                                                                      F047_LOTE ,
                                                                      F047_EXISTENCIAS ,
                                                                      F047_FECHA_VENCIMIENTO,
                                                                      F047_FECHA_FABRICACION )
                                                                    
                                                                    T047_STOCK_LOTES VALUES (BODEGA,:NEW.F004_CODIGO, :NEW.F049_LOTE_SERIAL , :NEW.F049_CANTIDAD_TOTAL_INVENTARIO,:NEW.F049_FECHA_VENCIMIENTO_PROD, :NEW.F049_FECHA_FABRICACION ) 
                                                                     */
                                                      END IF;
                                                      
                                              ELSE -- NO REQUIERE LOTE    F004_REQUIERE_LOTE   = 'N'     
                                                 
                                                    IF NOT (:NEW.F049_LOTE_SERIAL IS NULL)  THEN 
                                                    RAISE_APPLICATION_ERROR(-20020,'ERROR: EL PRODUCTO '  || DESCRIPCION_PROD || ' NO REQUIRE LOTE' );
                                                  END IF;
                                                 
                                                  -- EXISTE EN LA TABLA DE STOCK EL PRODUCTO  CON LOTE NULO
                                                    select COUNT(*) INTO EXISTEPROD_T047_STOCK from T047_STOCK_LOTES   STOCK
                                                      WHERE  STOCK.F011_CODIGO  = BODEGA  AND  STOCK.F004_CODIGO = :NEW.F004_CODIGO AND  F047_LOTE IS NULL;
                                                  
                                                     IF EXISTEPROD_T047_STOCK > 0 THEN -- EXISTE PRODUCTO EN TBL STOCK
                                          
                                                          -- ACTUALICE LAS CANTIDADES SIN LOTE
                                                         UPDATE  T047_STOCK_LOTES  STOCK  SET  STOCK.F047_EXISTENCIAS = (STOCK.F047_EXISTENCIAS + :NEW.F049_CANTIDAD_TOTAL_INVENTARIO)
                                                         WHERE STOCK.F004_CODIGO = :NEW.F004_CODIGO and STOCK.F011_CODIGO  = BODEGA  AND F047_LOTE IS NULL;
                                                     ELSE -- SI NO EXISTEEN TBL STOCK
                                                        INSERT INTO   
                                                          --F047_CODIGO 
                                                         T047_STOCK_LOTES 
                                                          (F011_CODIGO ,
                                                          F004_CODIGO ,
                                                          F047_LOTE ,
                                                          F047_EXISTENCIAS ,
                                                          F047_FECHA_VENCIMIENTO,
                                                          F047_FECHA_FABRICACION )
                                                         VALUES (BODEGA,:NEW.F004_CODIGO, :NEW.F049_LOTE_SERIAL , :NEW.F049_CANTIDAD_TOTAL_INVENTARIO,:NEW.F049_FECHA_VENCIMIENTO_PROD, :NEW.F049_FECHA_FABRICACION ); 
                                                      END  IF;
                                              
                                              END IF;-- F004_REQUIERE_LOTE   = 'S'
                                              
                                              -- COSTO ULTIMA COMPRA
                                              UPDATE T004_PRODUCTO SET F004_COSTO_UNIT_ULTIMA_COMPRA  = ROUND((:NEW.F049_VALOR_NETO_ITEM /:NEW.F049_CANTIDAD_TOTAL_INVENTARIO),2)
                                              WHERE  F004_CODIGO = :NEW.F004_CODIGO;   -- =>    Costo unitario
                 
                                      END IF; --if TIPO_MOVI   = 'E'  then  



                                                      -- AQUI  YA INGRESO A INVENTARIO 
                                                    
                                                    
                                                    
                                                    
                                                    
                                                    --  OJOOOOOOOOOOOOOOOOOO AQUI EMPIEZAN LAS VALIDACIONES PARA DESCONTAR DEL DOCUMENTO RELACIONADO                                      
                                                         
                                                               --     CODIGO DE MOVIMIENTO(EO) 
                                                             
                                                            /* IF COD_MOV  =  'EO'  THEN  -- SI ES UNA ENTRADA CON ORDEN DE COMPRAS SIN IMPORTAR EL TIPO DE DOCUMENTO RELACIONADO ( ORDEN DE COMPRA O REMISION)
                                                             
                                                                -- ACTUALIZA LA ORDEN DE COMPRA O REMISION                                                                   
                                                                 UPDATE T049_DET_DOCUMENTO  SET F049_CANTIDAD_PTE_TOTAL_INVENT  = F049_CANTIDAD_PTE_TOTAL_INVENT - :NEW.F049_CANTIDAD_TOTAL_INVENTARIO  -- SI ES NEGEATIVO  ESTE VALOR EN LA ORDEN DE COOMPRA ES PORQUE SE ENTRARON MAS CANTIDADES DE LAS QUE SE PIDIO
                                                                  WHERE  F048_CODIGO  =PF048_ID_RELACIONADO AND F004_CODIGO   = :NEW.F004_CODIGO  ;  --  'CO' O  REMISION
                                                             END IF;  -- COD_MOV  =  'EO'  ES UNA ENTRADA CON ORDEN DE COMPRAS SIN IMPORTAR EL TIPO DE DOCUMENTO RELACIONADO ( ORDEN DE COMPRA O REMISION)
                                                            */
                                                          
                                                            -- Remision
                                                                --IF COD_MOV  =  'RM'  THEN
                                      
                              
                                  --**** FIN ENTRADA A ALMACEN INVENTARIO ****
  
                           END IF; -- IF TIPO_MOVI_DOC   = 'S'
                     END IF ; --  IF PESTADO_DOC    = 'D' THEN       
                   END IF;--  (TIPO  = 'I')  AND (TIPO_MOVI_DOC  IN ('E','S'))  AND :NEW.F051_CODIGO = 'D' then    PRODUCTO ES DE INVENTARIO then   Y EL DOCUEMENTO  AFECTA INVENTARIO Y EL ESTADO NUEVO ES DEFINITIVO
            END; 
      /
      
      

         /*  CREATE OR REPLACE TRIGGER TGR_T049_DET_DOCUM_BLOQUE
            BEFORE UPDATE ON T049_DET_DOCUMENTO 
            FOR EACH ROW 
            DECLARE 
                    TIPO_MOVI_DOC  CHAR(3);    --  E = ENTRADA  S = SALIDA   N/A   =  NO APLICA
                    ESTADO_DOC CHAR(1);
                
            BEGIN
                
               SELECT DOC.F051_CODIGO INTO ESTADO_DOC FROM  T048_DOCUMENTO DOC
               INNER JOIN  T051_ESTADOS_COMPRA   EST  ON  (EST.F051_CODIGO  = DOC.F051_CODIGO)
               WHERE DOC.F048_CODIGO  = :OLD.F048_CODIGO;
               
               IF ESTADO_DOC  = 'D'  THEN 
                  RAISE_APPLICATION_ERROR(-20000,'LOS DOCUMENTOS  EN ESTADO DEFINITIVO NO SE PUEDEN EDITAR');
               END IF; 
                
                
            END; 

     /
*/

      CREATE UNIQUE INDEX T049_F048_COD_F049_ITEM ON T049_DET_DOCUMENTO(F048_CODIGO, F049_CODIGO);   -- INDICE UNICO
      ALTER TABLE T049_DET_DOCUMENTO ADD CONSTRAINT UQ_LOTE_EXISTE UNIQUE (F048_CODIGO, F004_CODIGO,F049_LOTE_SERIAL); -- CALVE UNICA QUE EL CODIGO DEL PRODUCTO NO SE  REPITA EN EL DETALLE DE UNA COMPRA

     
        
    
    
  /**    SOPORTES DE DOCUMENTOS     ***/    
    CREATE TABLE  T056_SOPORTES (
      F056_CODIGO NUMERIC(15,0)  NOT NULL   ,
      F048_CODIGO NUMERIC(12,0)  NOT NULL  ,
      F056_NOMBRE VARCHAR(50) NOT NULL  ,
      F056_ARCHIVO BLOB  NOT NULL  ,
      F056_EXTENSION VARCHAR(5) NOT NULL    ,
   PRIMARY KEY(F056_CODIGO));

    ALTER TABLE T056_SOPORTES  ADD CONSTRAINT  FK_F048_CODIGO_T056   FOREIGN KEY  (F048_CODIGO)  REFERENCES T048_DOCUMENTO(F048_CODIGO) ;
    
    --  
    CREATE SEQUENCE  SQ_T056_SOPORTES_F056_CODIGO MINVALUE 1 INCREMENT BY 1 START WITH 1 NOCACHE  ORDER  NOCYCLE ; 
    
       CREATE OR REPLACE TRIGGER TGR_T056_SOPORTES
            BEFORE INSERT ON T056_SOPORTES 
            FOR EACH ROW 
            BEGIN
          --  ID  F049_CODIGO   AUTO GEN
               SELECT SQ_T056_SOPORTES_F056_CODIGO.NEXTVAL INTO :NEW.F056_CODIGO FROM DUAL;
              -- SELECT (max (F049_ITEM) +1)  INTO :NEW.F049_ITEM FROM T049_DET_COMPRA  WHERE F048_CODIGO   = :NEW.F048_CODIGO ;
           END  ;  
       /

       /************  AUTO IN  F049_CODIGO ************/
        
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
       /*********************  seccion de trigger   *****************/
 
/*   set define off
    CREATE OR REPLACE TRIGGER TRIGGER1 
    BEFORE INSERT ON T044_SUBCATEGORIA1 
    FOR EACH ROW 
    BEGIN
       SELECT SQ_T044_SUBCATEG_F044_CODIGO.NEXTVAL INTO :NEW.F044_CODIGO FROM DUAL;
    END;
    /
   set define off
 CREATE OR REPLACE TRIGGER TGR_T013_USUARIO
    BEFORE INSERT ON T013_USUARIO 
    FOR EACH ROW 
    BEGIN
       SELECT SQ_T013_USUARIO_F013_CODIGO.NEXTVAL INTO :NEW.F013_CODIGO FROM DUAL;  -- CAMPO AUTO F013_CODIGO 
    END;
    
    
     CREATE OR REPLACE TRIGGER TGR_T039_CLIENTE
    BEFORE INSERT ON T039_CLIENTE 
    FOR EACH ROW 
    BEGIN
       SELECT SQ_T039_CLIENTE_F039_CODIGO.NEXTVAL INTO :NEW.F039_CODIGO FROM DUAL;
    END;
     
    
     CREATE OR REPLACE TRIGGER TGR_T007_PROVEEDOR 
    BEFORE INSERT ON T007_PROVEEDOR 
    FOR EACH ROW 
    BEGIN
       SELECT SQ_T007_PROVEEDOR_F007_CODIGO.NEXTVAL INTO :NEW.F007_CODIGO FROM DUAL;
    END; 
    
    
     CREATE OR REPLACE TRIGGER TGR_T011_BODEGA
            BEFORE INSERT ON T011_BODEGA 
            FOR EACH ROW 
            BEGIN
               SELECT SQ_T011_BODEGA_F011_CODIGO.NEXTVAL INTO :NEW.F011_CODIGO FROM DUAL;
            END; 

     CREATE OR REPLACE TRIGGER TGR_T049_DET_COMPRA
            BEFORE INSERT ON T049_DET_COMPRA 
            FOR EACH ROW 
            BEGIN
               SELECT SQ_T049_DET_COMPRA_F049_CODIGO.NEXTVAL INTO :NEW.F049_CODIGO FROM DUAL;
            END; 
       
    
    */
    
    
    -------------  DESARROLLO NOTAS CONTABLES  -----------------------------------------------
    
    
 


    
    
    